[{"title":"Compiling SQLCipher on Windows and Linux","permalink":"https://gufeng.sh/note/compiling-sqlcipher/","link":"https://gufeng.sh/note/compiling-sqlcipher/","date":"2020-12-30T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>Zetetic does not provide a dynamic library installer for users. Therefore, a static library is a great choice to deliver.</p>\n\n<h2 id=\"windows\">Windows</h2>\n<p>OpenSSL headers are required. You can install it via the C++ Library Manager from Microsoft: <a href=\"https://github.com/microsoft/vcpkg\">vcpkg</a>.  vcpkg could be installed anywhere.</p>\n\n<div class=\"language-powershell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">PS</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"nx\">\\vcpkg</span><span class=\"w\"> </span><span class=\"nx\">install</span><span class=\"w\"> </span><span class=\"nx\">openssl:x64-windows-static</span><span class=\"w\">\n</span><span class=\"n\">PS</span><span class=\"err\">&gt;</span><span class=\"w\"> </span><span class=\"o\">.</span><span class=\"nx\">\\vcpkg</span><span class=\"w\"> </span><span class=\"nx\">install</span><span class=\"w\"> </span><span class=\"nx\">openssl:x86-windows-static</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>The most convenient way to let the SQLCipher compiler find these headers is to move vcpkg’s openssl install dir to the root of SQLCipher.</p>\n\n<p>Now open Makefile.msc in a text editor and replace the lines:</p>\n<div class=\"language-makefile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Flags controlling use of the in memory btree implementation\n#\n# SQLITE_TEMP_STORE is 0 to force temporary tables to be in a file, 1 to\n# default to file, 2 to default to memory, and 3 to force temporary\n# tables to always be in memory.\n#\n</span><span class=\"nv\">TCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(TCC)</span> <span class=\"nt\">-DSQLITE_TEMP_STORE</span><span class=\"o\">=</span>1\n<span class=\"nv\">RCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(RCC)</span> <span class=\"nt\">-DSQLITE_TEMP_STORE</span><span class=\"o\">=</span>1\n</code></pre></div></div>\n<p>by the following:</p>\n<div class=\"language-makefile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Flags controlling use of the in memory btree implementation\n#\n# SQLITE_TEMP_STORE is 0 to force temporary tables to be in a file, 1 to\n# default to file, 2 to default to memory, and 3 to force temporary\n# tables to always be in memory.\n#\n</span><span class=\"nv\">TCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(TCC)</span> <span class=\"nt\">-DSQLITE_TEMP_STORE</span><span class=\"o\">=</span>2\n<span class=\"nv\">RCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(RCC)</span> <span class=\"nt\">-DSQLITE_TEMP_STORE</span><span class=\"o\">=</span>2\n\n<span class=\"nv\">TCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(TCC)</span> <span class=\"nt\">-DSQLITE_HAS_CODEC</span>\n<span class=\"nv\">RCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(RCC)</span> <span class=\"nt\">-DSQLITE_HAS_CODEC</span>\n\n<span class=\"err\">!IF</span> <span class=\"s2\">\"$(PLATFORM)\"</span><span class=\"err\">==</span><span class=\"s2\">\"x64\"</span>\n<span class=\"nv\">TCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(TCC)</span> <span class=\"nt\">-I</span><span class=\"s2\">\"openssl-windows_x64-windows-static</span><span class=\"se\">\\i</span><span class=\"s2\">nclude\"</span>\n<span class=\"nv\">RCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(RCC)</span> <span class=\"nt\">-I</span><span class=\"s2\">\"openssl-windows_x64-windows-static</span><span class=\"se\">\\i</span><span class=\"s2\">nclude\"</span>\n<span class=\"err\">!ELSEIF</span> <span class=\"s2\">\"$(PLATFORM)\"</span><span class=\"err\">==</span><span class=\"s2\">\"x86\"</span>\n<span class=\"nv\">TCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(TCC)</span> <span class=\"nt\">-I</span><span class=\"s2\">\"openssl-windows_x86-windows-static</span><span class=\"se\">\\i</span><span class=\"s2\">nclude\"</span>\n<span class=\"nv\">RCC</span> <span class=\"o\">=</span> <span class=\"nv\">$(RCC)</span> <span class=\"nt\">-I</span><span class=\"s2\">\"openssl-windows_x86-windows-static</span><span class=\"se\">\\i</span><span class=\"s2\">nclude\"</span>\n<span class=\"err\">!ENDIF</span>\n\n<span class=\"err\">!IF</span> <span class=\"s2\">\"$(PLATFORM)\"</span><span class=\"err\">==</span><span class=\"s2\">\"x64\"</span>\n<span class=\"nv\">LTLIBPATHS</span> <span class=\"o\">=</span> <span class=\"nv\">$(LTLIBPATHS)</span> /LIBPATH:<span class=\"s2\">\"openssl-windows_x64-windows-static</span><span class=\"se\">\\l</span><span class=\"s2\">ib\"</span>\n<span class=\"nv\">LTLIBS</span> <span class=\"o\">=</span> <span class=\"nv\">$(LTLIBS)</span> libcrypto.lib libssl.lib\n<span class=\"err\">!ELSEIF</span> <span class=\"s2\">\"$(PLATFORM)\"</span><span class=\"err\">==</span><span class=\"s2\">\"x86\"</span>\n<span class=\"nv\">LTLIBPATHS</span> <span class=\"o\">=</span> <span class=\"nv\">$(LTLIBPATHS)</span> /LIBPATH:<span class=\"s2\">\"openssl-windows_x86-windows-static</span><span class=\"se\">\\l</span><span class=\"s2\">ib\"</span>\n<span class=\"nv\">LTLIBS</span> <span class=\"o\">=</span> <span class=\"nv\">$(LTLIBS)</span> libcrypto32.lib libssl32.lib\n<span class=\"err\">!ENDIF</span>\n\n<span class=\"c\"># for OpenSSL: https://github.com/openssl/openssl/blob/3d362f190306b62a17aa2fd475b2bc8b3faa8142/NOTES.WIN#L112\n</span><span class=\"nv\">LTLIBS</span> <span class=\"o\">=</span> <span class=\"nv\">$(LTLIBS)</span> WS2_32.Lib Gdi32.Lib AdvAPI32.Lib Crypt32.Lib User32.Lib\n</code></pre></div></div>\n<p>Finally, run <code class=\"language-plaintext highlighter-rouge\">nmake /f Makefile.msc</code> command, and <code class=\"language-plaintext highlighter-rouge\">sqlcipher.dll</code> will be generated.</p>\n\n<h2 id=\"linux\">Linux</h2>\n<p>Make sure OpenSSL headers are installed on your workstation. Using package managers is a great choice.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span>SQLITE_HAS_CODEC\n<span class=\"nb\">export </span><span class=\"nv\">SQLITE_TEMP_STORE</span><span class=\"o\">=</span>2\n\n./configure <span class=\"nt\">--enable-tempstore</span><span class=\"o\">=</span><span class=\"nb\">yes </span><span class=\"nv\">LDFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-lcrypto\"</span>\n</code></pre></div></div>\n<p>Then, call the make tool</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>make\n</code></pre></div></div>\n<p><code class=\"language-plaintext highlighter-rouge\">libsqlite3.so</code> (instead of <code class=\"language-plaintext highlighter-rouge\">libsqlcipher.so</code>) will be generated.</p>\n\n<p>Compiling on macOS seems to follow the same routine save that a .dylib file substitutes the .so file.</p>","excerpt":"Zetetic does not provide a dynamic library installer for users. Therefore, a static library is a great choice to deliver.\n\nWindows\nOpenSSL headers are required. You can install it via the C++ Library Manager from Microsoft: vcpkg.  vcpkg could be installed anywhere.\n\nPS&gt; .\\vcpkg install openssl:x64-windows-static\nPS&gt; .\\vcpkg install openssl:x86-windows-static\n\n\nThe most convenient way to let the SQLCipher compiler find these headers is to move vcpkg’s openssl install dir to the root of SQLCipher.\n\nNow open Makefile.msc in a text editor and replace the lines:\n# Flags controlling use of the in memory btree implementation\n#\n# SQLITE_TEMP_STORE is 0 to force temporary tables to be in a file, 1 to\n# default to file, 2 to default to memory, and 3 to force temporary\n# tables to always be in memory.\n#\nTCC = $(TCC) -DSQLITE_TEMP_STORE=1\nRCC = $(RCC) -DSQLITE_TEMP_STORE=1\n\nby the following:\n# Flags controlling use of the in memory btree implementation\n#\n# SQLITE_TEMP_STORE is 0 to force temporary tables to be in a file, 1 to\n# default to file, 2 to default to memory, and 3 to force temporary\n# tables to always be in memory.\n#\nTCC = $(TCC) -DSQLITE_TEMP_STORE=2\nRCC = $(RCC) -DSQLITE_TEMP_STORE=2\n\nTCC = $(TCC) -DSQLITE_HAS_CODEC\nRCC = $(RCC) -DSQLITE_HAS_CODEC\n\n!IF \"$(PLATFORM)\"==\"x64\"\nTCC = $(TCC) -I\"openssl-windows_x64-windows-static\\include\"\nRCC = $(RCC) -I\"openssl-windows_x64-windows-static\\include\"\n!ELSEIF \"$(PLATFORM)\"==\"x86\"\nTCC = $(TCC) -I\"openssl-windows_x86-windows-static\\include\"\nRCC = $(RCC) -I\"openssl-windows_x86-windows-static\\include\"\n!ENDIF\n\n!IF \"$(PLATFORM)\"==\"x64\"\nLTLIBPATHS = $(LTLIBPATHS) /LIBPATH:\"openssl-windows_x64-windows-static\\lib\"\nLTLIBS = $(LTLIBS) libcrypto.lib libssl.lib\n!ELSEIF \"$(PLATFORM)\"==\"x86\"\nLTLIBPATHS = $(LTLIBPATHS) /LIBPATH:\"openssl-windows_x86-windows-static\\lib\"\nLTLIBS = $(LTLIBS) libcrypto32.lib libssl32.lib\n!ENDIF\n\n# for OpenSSL: https://github.com/openssl/openssl/blob/3d362f190306b62a17aa2fd475b2bc8b3faa8142/NOTES.WIN#L112\nLTLIBS = $(LTLIBS) WS2_32.Lib Gdi32.Lib AdvAPI32.Lib Crypt32.Lib User32.Lib\n\nFinally, run nmake /f Makefile.msc command, and sqlcipher.dll will be generated.\n\nLinux\nMake sure OpenSSL headers are installed on your workstation. Using package managers is a great choice.\n\nexport SQLITE_HAS_CODEC\nexport SQLITE_TEMP_STORE=2\n\n./configure --enable-tempstore=yes LDFLAGS=\"-lcrypto\"\n\nThen, call the make tool\nmake\n\nlibsqlite3.so (instead of libsqlcipher.so) will be generated.\n\nCompiling on macOS seems to follow the same routine save that a .dylib file substitutes the .so file.","languages":null,"categories":["note"],"tags":["notes"]},{"title":"Build your own live network!","permalink":"https://gufeng.sh/note/live-network/","link":"https://gufeng.sh/note/live-network/","date":"2020-03-12T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 id=\"under-the-hood\">Under the hood</h2>\n<p>When you clicked the start button to push your stream from streaming software like OBS, XSplit Broadcaster, they push your screen generally via RTMP<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> to the server.</p>\n\n<p>Since we cannot play RTMP stream directly via video tag in HTML5, what we are going to do is to save every video fragment from RTMP stream and generate an HLS<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup> playlist. There will be many <code class=\"language-plaintext highlighter-rouge\">.ts</code> files containing every fragment of videos and a <code class=\"language-plaintext highlighter-rouge\">.m3u8</code> file revealing <code class=\"language-plaintext highlighter-rouge\">ts</code> files to be played in the future.</p>\n\n<p>To deliver these ts and m3u8 files, we can use simple HTTP.</p>\n\n<p>Now the structure is pretty simple:</p>\n\n<table>\n  <tbody>\n    <tr>\n      <td>OBS</td>\n      <td>— RTMP —&gt;</td>\n      <td>Server</td>\n      <td>— HTTP —&gt;</td>\n      <td>Browsers</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"nginx-with-rtmp-support\">Nginx with RTMP support</h2>\n<p><strong><a href=\"https://github.com/arut/nginx-rtmp-module\">nginx-rtmp-module</a></strong> is an Nginx module that provides RTMP support to Nginx.</p>\n\n<p>We can compile an Nginx module via this:</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./configure <span class=\"nt\">--add-dynamic-module</span><span class=\"o\">=</span>/path/to/nginx-rtmp-module\n</code></pre></div></div>\n\n<p>After loading the module, we can work with Nginx config. Here is an example:</p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">rtmp</span> <span class=\"p\">{</span>\n    <span class=\"kn\">server</span> <span class=\"p\">{</span>\n        <span class=\"kn\">listen</span> <span class=\"mi\">1935</span><span class=\"p\">;</span>\n        <span class=\"kn\">chunk_size</span> <span class=\"mi\">4000</span><span class=\"p\">;</span>\n        <span class=\"kn\">buflen</span> <span class=\"s\">500ms</span><span class=\"p\">;</span>\n        \n        <span class=\"kn\">application</span> <span class=\"s\">live</span> <span class=\"p\">{</span>\n                <span class=\"kn\">live</span> <span class=\"no\">on</span><span class=\"p\">;</span>\n                <span class=\"kn\">allow</span> <span class=\"s\">play</span> <span class=\"mi\">10</span><span class=\"s\">.20.0.0/16</span><span class=\"p\">;</span>\n                <span class=\"kn\">deny</span> <span class=\"s\">play</span> <span class=\"s\">all</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">on_publish</span> <span class=\"s\">http://live-control.ifengge.cn:80/publish/</span><span class=\"p\">;</span>\n                <span class=\"kn\">on_publish_done</span> <span class=\"s\">http://live-control.ifengge.cn:80/done/</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">record</span> <span class=\"s\">all</span><span class=\"p\">;</span>\n                <span class=\"kn\">record_path</span> <span class=\"n\">/path/to/live/rec/</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">hls</span> <span class=\"no\">on</span><span class=\"p\">;</span>\n                <span class=\"kn\">hls_path</span> <span class=\"n\">/path/to/live/streams/</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">hls_fragment</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                <span class=\"kn\">hls_playlist_length</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">hls_nested</span> <span class=\"no\">on</span><span class=\"p\">;</span>\n                <span class=\"kn\">hls_fragment_naming</span> <span class=\"s\">system</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>With the stream key, the final URL will be like <code class=\"language-plaintext highlighter-rouge\">rtmp://ip:1935/live/key</code> (e.g., put <code class=\"language-plaintext highlighter-rouge\">rtmp://ip:1935/live</code> in the server field, and <code class=\"language-plaintext highlighter-rouge\">key</code> in the key field in XSplit), and it will be validated by <code class=\"language-plaintext highlighter-rouge\">on_publish</code> directive, see the module docs to find out.</p>\n\n<p>After we clicked the push button, we can immediately see several <code class=\"language-plaintext highlighter-rouge\">.ts</code> files and an <code class=\"language-plaintext highlighter-rouge\">index.m3u8</code> file in <code class=\"language-plaintext highlighter-rouge\">/path/to/live/streams/key</code>.</p>\n\n<p>⚠️ The playlist file is changing every time, therefore it cannot be cached.</p>\n\n<h2 id=\"serve-contents\">Serve contents</h2>\n<p>Create a host to this streaming folder like this:</p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">server</span> <span class=\"p\">{</span>\n        <span class=\"kn\">include</span>  <span class=\"nc\">confincludes/conf</span><span class=\"n\">/listen.https.conf</span><span class=\"p\">;</span>\n        <span class=\"kn\">server_name</span>  <span class=\"s\">live-content.example.com</span><span class=\"p\">;</span>\n\n        <span class=\"kn\">location</span> <span class=\"p\">~</span> <span class=\"sr\">^/streams/(\\w+/\\w+\\.m3u8)$</span> <span class=\"p\">{</span>\n                <span class=\"kn\">alias</span> <span class=\"n\">/path/to/live/streams/</span><span class=\"nv\">$1</span><span class=\"p\">;</span>\n                <span class=\"kn\">add_header</span> <span class=\"s\">Access-Control-Allow-Origin</span> <span class=\"s\">'https://live.ifengge.cn'</span><span class=\"p\">;</span>\n                <span class=\"kn\">add_header</span> <span class=\"s\">Access-Control-Allow-Methods</span> <span class=\"s\">'GET,</span> <span class=\"s\">OPTIONS'</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">expires</span> <span class=\"s\">-1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kn\">location</span> <span class=\"p\">~</span> <span class=\"sr\">^/streams/(\\w+/\\w+\\.ts)$</span> <span class=\"p\">{</span>\n                <span class=\"kn\">alias</span> <span class=\"n\">/path/to/live/streams/</span><span class=\"nv\">$1</span><span class=\"p\">;</span>\n                <span class=\"kn\">add_header</span> <span class=\"s\">Access-Control-Allow-Origin</span> <span class=\"s\">'https://live.ifengge.cn'</span><span class=\"p\">;</span>\n                <span class=\"kn\">add_header</span> <span class=\"s\">Access-Control-Allow-Methods</span> <span class=\"s\">'GET,</span> <span class=\"s\">OPTIONS'</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">expires</span> <span class=\"s\">max</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kn\">location</span> <span class=\"p\">~</span> <span class=\"sr\">^/rec/(\\w+\\.flv)$</span> <span class=\"p\">{</span>\n                <span class=\"kn\">alias</span> <span class=\"n\">/path/to/live/rec/</span><span class=\"nv\">$1</span><span class=\"p\">;</span>\n                <span class=\"kn\">add_header</span> <span class=\"s\">Access-Control-Allow-Origin</span> <span class=\"s\">'https://live.ifengge.cn'</span><span class=\"p\">;</span>\n                <span class=\"kn\">add_header</span> <span class=\"s\">Access-Control-Allow-Methods</span> <span class=\"s\">'GET,</span> <span class=\"s\">OPTIONS'</span><span class=\"p\">;</span>\n\n                <span class=\"kn\">expires</span> <span class=\"s\">max</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"webplayer-and-danmaku\">Webplayer and Danmaku</h2>\n<p>Some browsers support HLS natively, while some are not. However, we can always use <a href=\"https://github.com/video-dev/hls.js/\">hls.js</a> to tackle this.</p>\n\n<p>To provide danmaku support, you have to implement a websocket server.</p>\n\n<h2 id=\"about-playstations\">About Playstations</h2>\n<p>I’m using a USG as my gateway. The <code class=\"language-plaintext highlighter-rouge\">gateway.config.json</code> solution from ubnt is somewhat complicated.\nI managed to do it by directly casting <code class=\"language-plaintext highlighter-rouge\">live-*.twitch.tv</code> from DNS to my rtmp server.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>See the whitepaper here: <a href=\"https://wwwimages2.adobe.com/content/dam/acom/en/devnet/rtmp/pdf/rtmp_specification_1.0.pdf\">rtmp_specification_1.0.pdf</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p><a href=\"https://tools.ietf.org/html/rfc8216\">RFC 8216 - HTTP Live Streaming</a> <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"Under the hood\nWhen you clicked the start button to push your stream from streaming software like OBS, XSplit Broadcaster, they push your screen generally via RTMP1 to the server.\n\nSince we cannot play RTMP stream directly via video tag in HTML5, what we are going to do is to save every video fragment from RTMP stream and generate an HLS2 playlist. There will be many .ts files containing every fragment of videos and a .m3u8 file revealing ts files to be played in the future.\n\nTo deliver these ts and m3u8 files, we can use simple HTTP.\n\nNow the structure is pretty simple:\n\n\n  \n    \n      OBS\n      — RTMP —&gt;\n      Server\n      — HTTP —&gt;\n      Browsers\n    \n  \n\n\nNginx with RTMP support\nnginx-rtmp-module is an Nginx module that provides RTMP support to Nginx.\n\nWe can compile an Nginx module via this:\n./configure --add-dynamic-module=/path/to/nginx-rtmp-module\n\n\nAfter loading the module, we can work with Nginx config. Here is an example:\nrtmp {\n    server {\n        listen 1935;\n        chunk_size 4000;\n        buflen 500ms;\n        \n        application live {\n                live on;\n                allow play 10.20.0.0/16;\n                deny play all;\n\n                on_publish http://live-control.ifengge.cn:80/publish/;\n                on_publish_done http://live-control.ifengge.cn:80/done/;\n\n                record all;\n                record_path /path/to/live/rec/;\n\n                hls on;\n                hls_path /path/to/live/streams/;\n\n                hls_fragment 1;\n                hls_playlist_length 10;\n\n                hls_nested on;\n                hls_fragment_naming system;\n        }\n  }\n}\n\nWith the stream key, the final URL will be like rtmp://ip:1935/live/key (e.g., put rtmp://ip:1935/live in the server field, and key in the key field in XSplit), and it will be validated by on_publish directive, see the module docs to find out.\n\nAfter we clicked the push button, we can immediately see several .ts files and an index.m3u8 file in /path/to/live/streams/key.\n\n⚠️ The playlist file is changing every time, therefore it cannot be cached.\n\nServe contents\nCreate a host to this streaming folder like this:\nserver {\n        include  confincludes/conf/listen.https.conf;\n        server_name  live-content.example.com;\n\n        location ~ ^/streams/(\\w+/\\w+\\.m3u8)$ {\n                alias /path/to/live/streams/$1;\n                add_header Access-Control-Allow-Origin 'https://live.ifengge.cn';\n                add_header Access-Control-Allow-Methods 'GET, OPTIONS';\n\n                expires -1;\n        }\n\n        location ~ ^/streams/(\\w+/\\w+\\.ts)$ {\n                alias /path/to/live/streams/$1;\n                add_header Access-Control-Allow-Origin 'https://live.ifengge.cn';\n                add_header Access-Control-Allow-Methods 'GET, OPTIONS';\n\n                expires max;\n        }\n\n        location ~ ^/rec/(\\w+\\.flv)$ {\n                alias /path/to/live/rec/$1;\n                add_header Access-Control-Allow-Origin 'https://live.ifengge.cn';\n                add_header Access-Control-Allow-Methods 'GET, OPTIONS';\n\n                expires max;\n        }\n}\n\n\nWebplayer and Danmaku\nSome browsers support HLS natively, while some are not. However, we can always use hls.js to tackle this.\n\nTo provide danmaku support, you have to implement a websocket server.\n\nAbout Playstations\nI’m using a USG as my gateway. The gateway.config.json solution from ubnt is somewhat complicated.\nI managed to do it by directly casting live-*.twitch.tv from DNS to my rtmp server.\n\n\n  \n    \n      See the whitepaper here: rtmp_specification_1.0.pdf &#8617;&#xfe0e;\n    \n    \n      RFC 8216 - HTTP Live Streaming &#8617;&#xfe0e;","languages":null,"categories":["note"],"tags":["notes"]},{"title":"TOEFL Seat Availability Checker","permalink":"https://gufeng.sh/work/toefl-seat-availability-checker/","link":"https://gufeng.sh/work/toefl-seat-availability-checker/","date":"2020-02-16T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 id=\"intro\">Intro</h2>\n<p>Get all seat availability for current TOEFL schedule in China.</p>\n\n<h2 id=\"downloads\">Downloads</h2>\n<p class=\"largetype\"><a href=\"https://chrome.google.com/webstore/detail/eaionkhblciebfcdjnpjefjhfmcohhhh\">Add to Chrome</a></p>\n\n<h2 id=\"love-this\">Love this?</h2>\n<p>Please consider <a href=\"//donate.ifengge.cn/\">buying me a cup of coffee</a></p>","excerpt":"Intro\nGet all seat availability for current TOEFL schedule in China.\n\nDownloads\nAdd to Chrome\n\nLove this?\nPlease consider buying me a cup of coffee","languages":null,"categories":["work"],"tags":["works_personal"]},{"title":"CQUPT Reverse Proxy","permalink":"https://gufeng.sh/work/cqupt-rproxy/","link":"https://gufeng.sh/work/cqupt-rproxy/","date":"2019-12-19T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>To make our school’s internal resources accessible from the internet, I built a reverse proxy to expose everything behind our firewall to the internet.</p>\n\n<blockquote>\n  <p><strong>Disclaimer</strong>: This is an experimental project and everything is protected via Cloudflare Access with Origin Pull to ensure that only me and the people I authorized can access the endpoint.</p>\n</blockquote>\n\n<p class=\"browser\"><img src=\"https://img.akacdn.app/d1efbd7d30ee3ed76c14986af25f3499.png\" alt=\"Screenshot\" /></p>\n\n<h2 id=\"how-to-use-it\">How to use it?</h2>\n<ul>\n  <li><strong>Domain Available:</strong> Replace <code class=\"language-plaintext highlighter-rouge\">cqupt.edu.cn</code> with <code class=\"language-plaintext highlighter-rouge\">endpoint.domain</code><sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> in the domain part of any URL.</li>\n  <li><strong>IP Only:</strong> Prepend IP address in front of <code class=\"language-plaintext highlighter-rouge\">.endpoint.domain</code>.</li>\n</ul>\n\n<p>e.g.</p>\n<ul>\n  <li>If you want to visit <code class=\"language-plaintext highlighter-rouge\">jwzx.cqupt.edu.cn</code>, just type <code class=\"language-plaintext highlighter-rouge\">jwzx.endpoint.domain</code></li>\n  <li>Visit <code class=\"language-plaintext highlighter-rouge\">127.20.0.1.endpoint.domain</code> instead of <code class=\"language-plaintext highlighter-rouge\">127.20.0.1</code></li>\n</ul>\n\n<details>\n  <summary><b>Advanced Notices</b></summary>\n  <ol>\n    <li>Some destination server requires an TLS connection, and <code>*.secure.endpoint.domain</code> is aimed to do that. Otherwise, <code>*.endpoint.domain</code> will initiate a plain HTTP request to the destination.</li>\n    <li>Considering there will be many direct IP forwards, and there is no need to acquire a certificate for them. Thus, any domain access like <code>jwzx.endpoint.domain</code> is provided with a valid wildcard certificate, while IP accesses are not.</li>\n    <li>Destinations with unusual port(other than 80 and 443) are not supported and their link will not be overridden.</li>\n  </ol>\n</details>\n\n<h2 id=\"under-the-hood\">Under the hood</h2>\n<p>I used a Raspberry Pi 4 as the gateway benefited by its gigabit ethernet controller.</p>\n\n<p class=\"largetype\"><a href=\"https://colab.ifengge.cn/snippets/22\">NGINX Configuration ➡︎</a></p>\n\n<h3 id=\"override-redirects\">Override redirects</h3>\n<p>Of domains ending with <code class=\"language-plaintext highlighter-rouge\">cqupt.edu.cn</code></p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">proxy_redirect</span> \t\t<span class=\"p\">~</span><span class=\"sr\">^http://cqupt.edu.cn/(.*)</span> <span class=\"s\">https://endpoint.domain/</span><span class=\"nv\">$1</span><span class=\"p\">;</span>\n<span class=\"k\">proxy_redirect</span> \t\t<span class=\"p\">~</span><span class=\"sr\">^http://(.*).cqupt.edu.cn/(.*)</span> <span class=\"s\">https://</span><span class=\"nv\">$1</span><span class=\"s\">.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n<span class=\"k\">proxy_redirect</span>\t\t<span class=\"p\">~</span><span class=\"sr\">^https://(.*).cqupt.edu.cn/(.*)</span> <span class=\"s\">https://</span><span class=\"nv\">$1</span><span class=\"s\">.secure.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Of IPs</p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">proxy_redirect</span>\t\t<span class=\"p\">~</span><span class=\"sr\">^http://([0-9.]+)/(.*)</span> <span class=\"s\">http://</span><span class=\"nv\">$1</span><span class=\"s\">.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n<span class=\"k\">proxy_redirect</span>\t\t<span class=\"p\">~</span><span class=\"sr\">^https://([0-9.]+)/(.*)</span> <span class=\"s\">http://</span><span class=\"nv\">$1</span><span class=\"s\">.secure.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h3 id=\"override-links-on-pages\">Override links on pages.</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">nginx_substitutions_filter</code> is an enhanced <code class=\"language-plaintext highlighter-rouge\">sub_filter</code> module that allows multiple regexes to replace concurrently.<br />\nCheck out <a href=\"https://www.nginx.com/resources/wiki/modules/substitutions/\">Substitutions | NGINX</a> to find out more.</p>\n\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">subs_filter</span>\t\t<span class=\"s\">'http://cqupt.edu.cn'</span> <span class=\"s\">https://endpoint.domain</span> <span class=\"s\">gir</span><span class=\"p\">;</span>\n<span class=\"k\">subs_filter</span>\t\t<span class=\"s\">'http://(.*).cqupt.edu.cn'</span> <span class=\"s\">https://</span><span class=\"nv\">$1</span><span class=\"s\">.endpoint.domain</span> <span class=\"s\">gir</span><span class=\"p\">;</span>\n<span class=\"k\">subs_filter</span>\t\t<span class=\"s\">'https://(.*).cqupt.edu.cn'</span> <span class=\"s\">https://</span><span class=\"nv\">$1</span><span class=\"s\">.secure.endpoint.domain</span> <span class=\"s\">gir</span><span class=\"p\">;</span>\n<span class=\"k\">subs_filter</span>\t\t<span class=\"s\">'http://([0-9.]+)'</span> <span class=\"s\">http://</span><span class=\"nv\">$1</span><span class=\"s\">.endpoint.domain</span> <span class=\"s\">gir</span><span class=\"p\">;</span>\n<span class=\"k\">subs_filter</span>\t\t<span class=\"s\">'https://([0-9.]+)'</span> <span class=\"s\">http://</span><span class=\"nv\">$1</span><span class=\"s\">.secure.endpoint.domain</span> <span class=\"s\">gir</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<p>There is no need to match exact IPs since I configured a firewall to prevent malicious requests.</p>\n\n<p>Use the following statement to resolve our internal domains from our internal DNS servers.</p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">resolver</span> <span class=\"s\">[ns1.ip]</span> <span class=\"s\">[ns2.ip]</span> <span class=\"s\">valid=3600s</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Then configure <code class=\"language-plaintext highlighter-rouge\">iptables</code> to filter invalid requests.</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Generated by xtables-save v1.8.3 on Thu Dec 19 03:26:35 2019</span>\n<span class=\"k\">*</span>filter\n:INPUT ACCEPT <span class=\"o\">[</span>0:0]\n:FORWARD ACCEPT <span class=\"o\">[</span>0:0]\n:OUTPUT ACCEPT <span class=\"o\">[</span>0:0]\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-m</span> state <span class=\"nt\">--state</span> RELATED,ESTABLISHED <span class=\"nt\">-j</span> ACCEPT\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-d</span> <span class=\"o\">[</span>network/mask] <span class=\"nt\">-p</span> tcp <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> ACCEPT\n...\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-d</span> <span class=\"o\">[</span>ns1.ip] <span class=\"nt\">-p</span> udp <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> ACCEPT\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-d</span> <span class=\"o\">[</span>ns2.ip] <span class=\"nt\">-p</span> udp <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> ACCEPT\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> REJECT <span class=\"nt\">--reject-with</span> icmp-port-unreachable\nCOMMIT\n<span class=\"c\"># Completed on Thu Dec 19 03:26:35 2019</span>\n</code></pre></div></div>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p><code class=\"language-plaintext highlighter-rouge\">endpoint.domain</code> denotes the domain name of the endpoint just in this article. Remember to replace it in the real world. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"To make our school’s internal resources accessible from the internet, I built a reverse proxy to expose everything behind our firewall to the internet.\n\n\n  Disclaimer: This is an experimental project and everything is protected via Cloudflare Access with Origin Pull to ensure that only me and the people I authorized can access the endpoint.\n\n\n\n\nHow to use it?\n\n  Domain Available: Replace cqupt.edu.cn with endpoint.domain1 in the domain part of any URL.\n  IP Only: Prepend IP address in front of .endpoint.domain.\n\n\ne.g.\n\n  If you want to visit jwzx.cqupt.edu.cn, just type jwzx.endpoint.domain\n  Visit 127.20.0.1.endpoint.domain instead of 127.20.0.1\n\n\n\n  Advanced Notices\n  \n    Some destination server requires an TLS connection, and *.secure.endpoint.domain is aimed to do that. Otherwise, *.endpoint.domain will initiate a plain HTTP request to the destination.\n    Considering there will be many direct IP forwards, and there is no need to acquire a certificate for them. Thus, any domain access like jwzx.endpoint.domain is provided with a valid wildcard certificate, while IP accesses are not.\n    Destinations with unusual port(other than 80 and 443) are not supported and their link will not be overridden.\n  \n\n\nUnder the hood\nI used a Raspberry Pi 4 as the gateway benefited by its gigabit ethernet controller.\n\nNGINX Configuration ➡︎\n\nOverride redirects\nOf domains ending with cqupt.edu.cn\nproxy_redirect \t\t~^http://cqupt.edu.cn/(.*) https://endpoint.domain/$1;\nproxy_redirect \t\t~^http://(.*).cqupt.edu.cn/(.*) https://$1.endpoint.domain/$2;\nproxy_redirect\t\t~^https://(.*).cqupt.edu.cn/(.*) https://$1.secure.endpoint.domain/$2;\n\n\nOf IPs\nproxy_redirect\t\t~^http://([0-9.]+)/(.*) http://$1.endpoint.domain/$2;\nproxy_redirect\t\t~^https://([0-9.]+)/(.*) http://$1.secure.endpoint.domain/$2;\n\n\nOverride links on pages.\n\nnginx_substitutions_filter is an enhanced sub_filter module that allows multiple regexes to replace concurrently.\nCheck out Substitutions | NGINX to find out more.\n\nsubs_filter\t\t'http://cqupt.edu.cn' https://endpoint.domain gir;\nsubs_filter\t\t'http://(.*).cqupt.edu.cn' https://$1.endpoint.domain gir;\nsubs_filter\t\t'https://(.*).cqupt.edu.cn' https://$1.secure.endpoint.domain gir;\nsubs_filter\t\t'http://([0-9.]+)' http://$1.endpoint.domain gir;\nsubs_filter\t\t'https://([0-9.]+)' http://$1.secure.endpoint.domain gir;\n\nThere is no need to match exact IPs since I configured a firewall to prevent malicious requests.\n\nUse the following statement to resolve our internal domains from our internal DNS servers.\nresolver [ns1.ip] [ns2.ip] valid=3600s;\n\n\nThen configure iptables to filter invalid requests.\n# Generated by xtables-save v1.8.3 on Thu Dec 19 03:26:35 2019\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A OUTPUT -d [network/mask] -p tcp -m owner --uid-owner 33 -j ACCEPT\n...\n-A OUTPUT -d [ns1.ip] -p udp -m owner --uid-owner 33 -j ACCEPT\n-A OUTPUT -d [ns2.ip] -p udp -m owner --uid-owner 33 -j ACCEPT\n-A OUTPUT -m owner --uid-owner 33 -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\n# Completed on Thu Dec 19 03:26:35 2019\n\n\n\n  \n    \n      endpoint.domain denotes the domain name of the endpoint just in this article. Remember to replace it in the real world. &#8617;&#xfe0e;","languages":null,"categories":["work"],"tags":["works_community"]},{"title":"重庆邮电大学内网外入","permalink":"https://gufeng.sh/work/cqupt-rproxy/chs/","link":"https://gufeng.sh/work/cqupt-rproxy/chs/","date":"2019-12-19T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>为了让校内的资源能够在校外使用，我搭建了这个内网外入的代理来绕过学校防火墙的限制。</p>\n\n<blockquote>\n  <p><strong>声明</strong>: 该项目仅用于学习和研究目的，项目中的所有资源都被 Cloudflare Access 和 Origin Pull 保护。</p>\n</blockquote>\n\n<p class=\"browser\"><img src=\"https://img.akacdn.app/d1efbd7d30ee3ed76c14986af25f3499.png\" alt=\"Screenshot\" /></p>\n\n<h2 id=\"如何使用\">如何使用？</h2>\n<ul>\n  <li><strong>如果有域名：</strong> 将域名中的 <code class=\"language-plaintext highlighter-rouge\">cqupt.edu.cn</code> 替换为 <code class=\"language-plaintext highlighter-rouge\">endpoint.domain</code><sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> 即可。</li>\n  <li><strong>如果只有 IP 地址:</strong> 将 IP 地址放在 <code class=\"language-plaintext highlighter-rouge\">.endpoint.domain</code> 域名之前。</li>\n</ul>\n\n<p>举个例子</p>\n<ul>\n  <li>如果你要访问 <code class=\"language-plaintext highlighter-rouge\">jwzx.cqupt.edu.cn</code>，则在外网访问 <code class=\"language-plaintext highlighter-rouge\">jwzx.endpoint.domain</code></li>\n  <li>使用 <code class=\"language-plaintext highlighter-rouge\">127.20.0.1.endpoint.domain</code> 来访问 <code class=\"language-plaintext highlighter-rouge\">127.20.0.1</code></li>\n</ul>\n\n<details>\n  <summary><b>Advanced Notices</b></summary>\n  <ol>\n    <li>Some destination server requires an TLS connection, and <code>*.secure.endpoint.domain</code> is aimed to do that. Otherwise, <code>*.endpoint.domain</code> will initiate a plain HTTP request to the destination.</li>\n    <li>Considering there will be many direct IP forwards, and there is no need to acquire a certificate for them. Thus, any domain access like <code>jwzx.endpoint.domain</code> is provided with a valid wildcard certificate, while IP accesses are not.</li>\n    <li>Destinations with unusual port(other than 80 and 443) are not supported and their link will not be overridden.</li>\n  </ol>\n</details>\n\n<h2 id=\"原理\">原理</h2>\n<p>我选择了树莓派 4 来作为最终网关。</p>\n\n<p class=\"largetype\"><a href=\"https://colab.ifengge.cn/snippets/22\">NGINX 配置文件 ➡︎</a></p>\n\n<h3 id=\"覆盖重定向\">覆盖重定向</h3>\n<p>对于使用 <code class=\"language-plaintext highlighter-rouge\">cqupt.edu.cn</code> 为结尾的域名：</p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">proxy_redirect</span> \t\t<span class=\"p\">~</span><span class=\"sr\">^https?://cqupt.edu.cn/(.*)</span> <span class=\"s\">https://endpoint.domain/</span><span class=\"nv\">$1</span><span class=\"p\">;</span>\n<span class=\"k\">proxy_redirect</span> \t\t<span class=\"p\">~</span><span class=\"sr\">^http://(.*).cqupt.edu.cn/(.*)</span> <span class=\"s\">https://</span><span class=\"nv\">$1</span><span class=\"s\">.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n<span class=\"k\">proxy_redirect</span>\t\t<span class=\"p\">~</span><span class=\"sr\">^https://(.*).cqupt.edu.cn/(.*)</span> <span class=\"s\">https://</span><span class=\"nv\">$1</span><span class=\"s\">.secure.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>对于 IP 地址：</p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">proxy_redirect</span>\t\t<span class=\"p\">~</span><span class=\"sr\">^http://([0-9.]+)/(.*)</span> <span class=\"s\">http://</span><span class=\"nv\">$1</span><span class=\"s\">.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n<span class=\"k\">proxy_redirect</span>\t\t<span class=\"p\">~</span><span class=\"sr\">^https://([0-9.]+)/(.*)</span> <span class=\"s\">http://</span><span class=\"nv\">$1</span><span class=\"s\">.secure.endpoint.domain/</span><span class=\"nv\">$2</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h3 id=\"替换页面中的链接\">替换页面中的链接</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">nginx_substitutions_filter</code> 是增强版的 <code class=\"language-plaintext highlighter-rouge\">sub_filter</code>，它可以实现多个正则表达式同时进行替换<br />\n访问 <a href=\"https://www.nginx.com/resources/wiki/modules/substitutions/\">Substitutions | NGINX</a> 来查看更多信息。</p>\n\n<pre><code class=\"language-ngin\">subs_filter\t\t'https?://cqupt.edu.cn' https://endpoint.domain gir;\nsubs_filter\t\t'http://(.*).cqupt.edu.cn' https://$1.endpoint.domain gir;\nsubs_filter\t\t'https://(.*).cqupt.edu.cn' https://$1.secure.endpoint.domain gir;\nsubs_filter\t\t'http://([0-9.]+)' http://$1.endpoint.domain gir;\nsubs_filter\t\t'https://([0-9.]+)' http://$1.secure.endpoint.domain gir;\n</code></pre>\n<p>因为接下来会配置防火墙，我们不需要在此匹配到精确的 IP 地址，也不需要做过多检查。</p>\n\n<p>使用下面的语句来从校内的 DNS 服务器解析内部专用的域名</p>\n<div class=\"language-nginx highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">resolver</span> <span class=\"s\">[ns1.ip]</span> <span class=\"s\">[ns2.ip]</span> <span class=\"s\">valid=3600s</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>最后配置 <code class=\"language-plaintext highlighter-rouge\">iptables</code> 防火墙来过滤非正常请求</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># Generated by xtables-save v1.8.3 on Thu Dec 19 03:26:35 2019</span>\n<span class=\"k\">*</span>filter\n:INPUT ACCEPT <span class=\"o\">[</span>0:0]\n:FORWARD ACCEPT <span class=\"o\">[</span>0:0]\n:OUTPUT ACCEPT <span class=\"o\">[</span>0:0]\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-m</span> state <span class=\"nt\">--state</span> RELATED,ESTABLISHED <span class=\"nt\">-j</span> ACCEPT\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-d</span> <span class=\"o\">[</span>network/mask] <span class=\"nt\">-p</span> tcp <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> ACCEPT\n...\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-d</span> <span class=\"o\">[</span>ns1.ip] <span class=\"nt\">-p</span> udp <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> ACCEPT\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-d</span> <span class=\"o\">[</span>ns2.ip] <span class=\"nt\">-p</span> udp <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> ACCEPT\n<span class=\"nt\">-A</span> OUTPUT <span class=\"nt\">-m</span> owner <span class=\"nt\">--uid-owner</span> 33 <span class=\"nt\">-j</span> REJECT <span class=\"nt\">--reject-with</span> icmp-port-unreachable\nCOMMIT\n<span class=\"c\"># Completed on Thu Dec 19 03:26:35 2019</span>\n</code></pre></div></div>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p><code class=\"language-plaintext highlighter-rouge\">endpoint.domain</code> 仅在本文中代表内网外入的入口域名。当您需要使用内网外入时，请将其替换为真实的入口域名。 <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"为了让校内的资源能够在校外使用，我搭建了这个内网外入的代理来绕过学校防火墙的限制。\n\n\n  声明: 该项目仅用于学习和研究目的，项目中的所有资源都被 Cloudflare Access 和 Origin Pull 保护。\n\n\n\n\n如何使用？\n\n  如果有域名： 将域名中的 cqupt.edu.cn 替换为 endpoint.domain1 即可。\n  如果只有 IP 地址: 将 IP 地址放在 .endpoint.domain 域名之前。\n\n\n举个例子\n\n  如果你要访问 jwzx.cqupt.edu.cn，则在外网访问 jwzx.endpoint.domain\n  使用 127.20.0.1.endpoint.domain 来访问 127.20.0.1\n\n\n\n  Advanced Notices\n  \n    Some destination server requires an TLS connection, and *.secure.endpoint.domain is aimed to do that. Otherwise, *.endpoint.domain will initiate a plain HTTP request to the destination.\n    Considering there will be many direct IP forwards, and there is no need to acquire a certificate for them. Thus, any domain access like jwzx.endpoint.domain is provided with a valid wildcard certificate, while IP accesses are not.\n    Destinations with unusual port(other than 80 and 443) are not supported and their link will not be overridden.\n  \n\n\n原理\n我选择了树莓派 4 来作为最终网关。\n\nNGINX 配置文件 ➡︎\n\n覆盖重定向\n对于使用 cqupt.edu.cn 为结尾的域名：\nproxy_redirect \t\t~^https?://cqupt.edu.cn/(.*) https://endpoint.domain/$1;\nproxy_redirect \t\t~^http://(.*).cqupt.edu.cn/(.*) https://$1.endpoint.domain/$2;\nproxy_redirect\t\t~^https://(.*).cqupt.edu.cn/(.*) https://$1.secure.endpoint.domain/$2;\n\n\n对于 IP 地址：\nproxy_redirect\t\t~^http://([0-9.]+)/(.*) http://$1.endpoint.domain/$2;\nproxy_redirect\t\t~^https://([0-9.]+)/(.*) http://$1.secure.endpoint.domain/$2;\n\n\n替换页面中的链接\n\nnginx_substitutions_filter 是增强版的 sub_filter，它可以实现多个正则表达式同时进行替换\n访问 Substitutions | NGINX 来查看更多信息。\n\nsubs_filter\t\t'https?://cqupt.edu.cn' https://endpoint.domain gir;\nsubs_filter\t\t'http://(.*).cqupt.edu.cn' https://$1.endpoint.domain gir;\nsubs_filter\t\t'https://(.*).cqupt.edu.cn' https://$1.secure.endpoint.domain gir;\nsubs_filter\t\t'http://([0-9.]+)' http://$1.endpoint.domain gir;\nsubs_filter\t\t'https://([0-9.]+)' http://$1.secure.endpoint.domain gir;\n\n因为接下来会配置防火墙，我们不需要在此匹配到精确的 IP 地址，也不需要做过多检查。\n\n使用下面的语句来从校内的 DNS 服务器解析内部专用的域名\nresolver [ns1.ip] [ns2.ip] valid=3600s;\n\n\n最后配置 iptables 防火墙来过滤非正常请求\n# Generated by xtables-save v1.8.3 on Thu Dec 19 03:26:35 2019\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A OUTPUT -d [network/mask] -p tcp -m owner --uid-owner 33 -j ACCEPT\n...\n-A OUTPUT -d [ns1.ip] -p udp -m owner --uid-owner 33 -j ACCEPT\n-A OUTPUT -d [ns2.ip] -p udp -m owner --uid-owner 33 -j ACCEPT\n-A OUTPUT -m owner --uid-owner 33 -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\n# Completed on Thu Dec 19 03:26:35 2019\n\n\n\n  \n    \n      endpoint.domain 仅在本文中代表内网外入的入口域名。当您需要使用内网外入时，请将其替换为真实的入口域名。 &#8617;&#xfe0e;","languages":null,"categories":["work"],"tags":[]},{"title":"CloudFront Origin Router","permalink":"https://gufeng.sh/note/cloudfront-origin-router/","link":"https://gufeng.sh/note/cloudfront-origin-router/","date":"2019-12-09T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>CloudFront delivers websites to users from the nearest locations. Meanwhile, it forward requests that are not cached or not permitted to be cached to your origin servers. However, it is not flexible enough and neither smart enough since it cannot automatically decide the fastest origin based on the response time from edge nodes to origin servers, cannot differentiate execution timeout and connect timeout, etc.</p>\n\n<h2 id=\"lambda--cloudfront\">Lambda × CloudFront</h2>\n<p>AWS has a service called Lambda which offers a serverless script execution environment. When you bring it to CloudFront, with replication on every edge node, it is called Lambda@Edge. Then you can use a script to amend requests before CloudFront sends it to the original server.</p>\n<blockquote>\n  <p>Lambda@Edge only supports<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> <code class=\"language-plaintext highlighter-rouge\">nodejs8.10</code>, <code class=\"language-plaintext highlighter-rouge\">nodejs10.x</code>, or <code class=\"language-plaintext highlighter-rouge\">python3.7</code> even though Go and other languages can be uploaded on the setup page. Besides, Lambda@Edge has only one second of execution time.</p>\n</blockquote>\n\n<p>To start, given that Lambda@Edge is a form of AWS Lambda, you can use the examples illustrated in <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/python-programming-model.html\">Building Lambda Functions with Python</a>. It is worth noting that the parameter <code class=\"language-plaintext highlighter-rouge\">event</code> has a structure defined here: <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-event-structure.html\">Lambda@Edge Event Structure</a>.</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"s\">'Records'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s\">'cf'</span><span class=\"p\">][</span><span class=\"s\">'request'</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">request</span>\n</code></pre></div></div>\n\n<p>Then define a const array that holds all available origins:</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">SERVERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"host\"</span><span class=\"p\">:</span> <span class=\"s\">\"o1.example.com\"</span><span class=\"p\">,</span> <span class=\"s\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">443</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"host\"</span><span class=\"p\">:</span> <span class=\"s\">\"o2.example.com\"</span><span class=\"p\">,</span> <span class=\"s\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">443</span><span class=\"p\">},</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>You can make a simple HTTP request to determine the fastest origin by using the following code:</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># s: Server Object\n</span><span class=\"k\">def</span> <span class=\"nf\">evaluate</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">client</span><span class=\"p\">.</span><span class=\"n\">HTTPConnection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s\">'host'</span><span class=\"p\">],</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s\">'port'</span><span class=\"p\">],</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">)</span>\n        <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s\">\"HEAD\"</span><span class=\"p\">,</span> <span class=\"s\">\"/\"</span><span class=\"p\">)</span>\n        <span class=\"n\">connection</span><span class=\"p\">.</span><span class=\"n\">getresponse</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"[Down] unreachable host:\"</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s\">'host'</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"[OK] reachable host:\"</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s\">'host'</span><span class=\"p\">])</span>\n    <span class=\"p\">...</span> <span class=\"n\">pushlish</span> <span class=\"n\">result</span>\n</code></pre></div></div>\n<p>Better use a multithreading model since there is a time limit:</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">for</span> <span class=\"n\">server</span> <span class=\"ow\">in</span> <span class=\"n\">SERVERS</span><span class=\"p\">:</span>\n    <span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">evaluate</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,)).</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>You may need a watchdog so as to avoid timeout:</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">guard</span><span class=\"p\">():</span>\n    <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.9</span><span class=\"p\">)</span>\n    <span class=\"p\">...</span> <span class=\"n\">publish</span> <span class=\"n\">a</span> <span class=\"n\">default</span> <span class=\"n\">server</span>\n</code></pre></div></div>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">threading</span><span class=\"p\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">guard</span><span class=\"p\">).</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>After this, you have to implement a listener that only accept the first result from all threads, and finally, redirect the request to the fastest responder in the handler:</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s\">\"origin\"</span><span class=\"p\">][</span><span class=\"s\">\"custom\"</span><span class=\"p\">][</span><span class=\"s\">\"domainName\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">choice</span><span class=\"p\">[</span><span class=\"s\">\"host\"</span><span class=\"p\">]</span>\n<span class=\"n\">request</span><span class=\"p\">[</span><span class=\"s\">\"origin\"</span><span class=\"p\">][</span><span class=\"s\">\"custom\"</span><span class=\"p\">][</span><span class=\"s\">\"port\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">choice</span><span class=\"p\">[</span><span class=\"s\">\"port\"</span><span class=\"p\">]</span>\n</code></pre></div></div>\n\n<p>You might not have to determine the fastest one each time when CloudFront is about to initiate a connection to an original server, so you have to make sure that you implemented a caching mechanism.</p>\n\n<h2 id=\"performances\">Performances</h2>\n<p>Once this is deployed you can view logs in the CloudWatch console.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">1ms</code> for common situations</p>\n\n<p><img src=\"https://img.akacdn.app/5e7bc941389a060b9dd929ece54ba406.png\" alt=\"5e7bc941389a060b9dd929ece54ba406.png\" class=\"size-small\" /></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">800+ms</code> to update cached origin</p>\n\n<p><img src=\"https://img.akacdn.app/5a80397f4b5bd92b601a27af966771b1.png\" alt=\"5a80397f4b5bd92b601a27af966771b1.png\" class=\"size-small\" /></p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">900+ms</code> when all origins are not reachable(result advocated by watchdog)</p>\n\n<p><img src=\"https://img.akacdn.app/97e6862a1790a859f52349c879cbbbc6.png\" alt=\"97e6862a1790a859f52349c879cbbbc6.png\" class=\"size-small\" /></p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>See <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-requirements-limits.html#lambda-requirements-lambda-function-configuration\">Lambda Function Configuration and Execution Environment</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"CloudFront delivers websites to users from the nearest locations. Meanwhile, it forward requests that are not cached or not permitted to be cached to your origin servers. However, it is not flexible enough and neither smart enough since it cannot automatically decide the fastest origin based on the response time from edge nodes to origin servers, cannot differentiate execution timeout and connect timeout, etc.\n\nLambda × CloudFront\nAWS has a service called Lambda which offers a serverless script execution environment. When you bring it to CloudFront, with replication on every edge node, it is called Lambda@Edge. Then you can use a script to amend requests before CloudFront sends it to the original server.\n\n  Lambda@Edge only supports1 nodejs8.10, nodejs10.x, or python3.7 even though Go and other languages can be uploaded on the setup page. Besides, Lambda@Edge has only one second of execution time.\n\n\nTo start, given that Lambda@Edge is a form of AWS Lambda, you can use the examples illustrated in Building Lambda Functions with Python. It is worth noting that the parameter event has a structure defined here: Lambda@Edge Event Structure.\ndef handler(event, context):\n    request = event['Records'][0]['cf']['request']\n    return request\n\n\nThen define a const array that holds all available origins:\nSERVERS = [\n    {\"host\": \"o1.example.com\", \"port\": 443},\n    {\"host\": \"o2.example.com\", \"port\": 443},\n    ...\n]\n\n\nYou can make a simple HTTP request to determine the fastest origin by using the following code:\n# s: Server Object\ndef evaluate(s):\n    try:\n        connection = http.client.HTTPConnection(s['host'], s['port'], timeout=0.8)\n        connection.request(\"HEAD\", \"/\")\n        connection.getresponse()\n    except:\n        print(\"[Down] unreachable host:\" + s['host'])\n        return\n    print(\"[OK] reachable host:\" + s['host'])\n    ... pushlish result\n\nBetter use a multithreading model since there is a time limit:\nfor server in SERVERS:\n    threading.Thread(target=evaluate, args=(server,)).start()\n\nYou may need a watchdog so as to avoid timeout:\ndef guard():\n    time.sleep(0.9)\n    ... publish a default server\n\nthreading.Thread(target=guard).start()\n\n\nAfter this, you have to implement a listener that only accept the first result from all threads, and finally, redirect the request to the fastest responder in the handler:\nrequest[\"origin\"][\"custom\"][\"domainName\"] = choice[\"host\"]\nrequest[\"origin\"][\"custom\"][\"port\"] = choice[\"port\"]\n\n\nYou might not have to determine the fastest one each time when CloudFront is about to initiate a connection to an original server, so you have to make sure that you implemented a caching mechanism.\n\nPerformances\nOnce this is deployed you can view logs in the CloudWatch console.\n\n1ms for common situations\n\n\n\n800+ms to update cached origin\n\n\n\n900+ms when all origins are not reachable(result advocated by watchdog)\n\n\n\n\n  \n    \n      See Lambda Function Configuration and Execution Environment &#8617;&#xfe0e;","languages":null,"categories":["note"],"tags":["notes"]},{"title":"The Rakish-Land's Auth Flow","permalink":"https://gufeng.sh/note/rakishland-authflow/","link":"https://gufeng.sh/note/rakishland-authflow/","date":"2019-12-03T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 class=\"no_toc\" id=\"table-of-contents\">Table of Contents</h2>\n<ul id=\"markdown-toc\">\n  <li><a href=\"#intro\" id=\"markdown-toc-intro\">Introducing the Rakish Land</a></li>\n  <li><a href=\"#auth-flow\" id=\"markdown-toc-auth-flow\">Our auth flow</a></li>\n  <li><a href=\"#createing-authorization-url\" id=\"markdown-toc-createing-authorization-url\">Creating an authorization URL</a></li>\n  <li><a href=\"#receiving-token\" id=\"markdown-toc-receiving-token\">Receiving tokens</a></li>\n  <li><a href=\"#verify-users\" id=\"markdown-toc-verify-users\">Verifying user’s eligibility</a></li>\n  <li><a href=\"#data-synchronizing\" id=\"markdown-toc-data-synchronizing\">Player’s data synchronizing</a></li>\n</ul>\n\n<h2 id=\"intro\">Introducing the Rakish Land</h2>\n<p>I’ve been working on starting a private Minecraft server these days, which is called the Rakish Land.<br />\nAlthough whitelist and the Mojang account verifying is safe enough, they can neither prevent unknown players from joining our server nor synchronize player data to our own databases. Therefore, we’ll introduce our own authentication flow using OAuth 2.0.</p>\n\n<h2 class=\"no_toc\" id=\"lets-embrace-bukkit-library\">Let’s embrace Bukkit library</h2>\n<p>Firstly, we have to decide between developing a server mod(using Forge) or a Bukkit plugin. Apparently, using a mod requires additional steps for users to connect to our systems, which might ruin players’ experience during preparation.<br />\n<strong>Bukkit</strong>, a great and stable server software that provides plugin supports, is our decision to program for. We started our development based on Bukkit’s APIs using pure Kotlin.</p>\n\n<blockquote>\n  <p>We used Gson, OkHttp, and Retrofit to queue our network requests.</p>\n</blockquote>\n\n<h2 id=\"auth-flow\">Our auth flow</h2>\n<p>Given our website has already supported OAuth 2 authorization flows, we just need to write our plugin side part as an OAuth 2 client.<br />\nWe still want users to confirm their identity, therefore the <code class=\"language-plaintext highlighter-rouge\">Authorization Code Grant</code> will be our authorization policy. All of our actions conform to the <a href=\"https://tools.ietf.org/html/rfc6749#page-24\">RFC 6749</a>.<br />\nWe’ll redirect new players to our authorize endpoint, use the authorization code to acquire access token and refresh token, use the access token to query players’ license, then save their refresh token using <a href=\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/metadata/Metadatable.html\"><code class=\"language-plaintext highlighter-rouge\">\tsetMetadata​(String metadataKey, MetadataValue newMetadataValue)</code></a><sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> method provided by Bukkit SDK.<br />\nAs above, when a player joined our server, we’ll check if this player has metadata of refresh token. If not, we regard this player as a new player, then we lock this player’s location, inventory, experience, health, food level, and other attributes, and ask this player to authenticate.</p>\n\n<h2 id=\"createing-authorization-url\">Creating an authorization URL</h2>\n<p>Considering authorization URLs to contain <code class=\"language-plaintext highlighter-rouge\">response_type</code>, <code class=\"language-plaintext highlighter-rouge\">client_id</code>, <code class=\"language-plaintext highlighter-rouge\">redirect_uri</code>, <code class=\"language-plaintext highlighter-rouge\">state</code>, etc, these URLs will be very long for humans to type. We used our link shorten APIs to simplify these URLs to the form of <code class=\"language-plaintext highlighter-rouge\">go.ifengge.cn/x</code> and keep it for a day long.<br />\nUsing a player’s UUID as the <code class=\"language-plaintext highlighter-rouge\">state</code> parameter has two advantages. One is that we can easily identify user’s UUID when we try to request licenses, and the other reason, most importantly, we could build identical URLs for users to authorize(see how authorization URLs are built), then CloudFront<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup> could cache API’s respond to save link spaces, and decrease response time.</p>\n\n<h2 id=\"receiving-token\">Receiving tokens</h2>\n<p>When a user authorized from our authorize endpoint, the authorize endpoint will redirect the user to a new URL with authorization code. We’ll use this code to exchange tokens from our token endpoint, this is standard.<br />\nWe implemented a simple HTTP server integrated into the plugin jar so as to receive authorization code as the new URL mentioned above after user authorized, and the server will automatically start when Bukkit calls <a href=\"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/plugin/java/JavaPlugin.html#onEnable--\">onEnable()</a>. Then we used NGINX as a reverse proxy to cast <code class=\"language-plaintext highlighter-rouge\">https://api.ifengge.cn/minecraft/login/</code> to this simple server.<br />\nThen the simple server has authorization code. In other words, our plugin has an authorization code to exchange tokens! Then we’ll do it by appending this code to our request to our token endpoint, and if we succeed(User might reject the authorize request, or be blocked during the authorize flow), we get both access token and refresh token.</p>\n\n<h2 id=\"verify-users\">Verifying user’s eligibility</h2>\n<p>We’ll attach the access token to our user account APIs to check whether this user has access to our server, download Dalvik’s Club ID profile, and register this player’s Mojang profile to our database.<br />\nAs mentioned in <a href=\"#createing-authorization-url\">Creating an authorization URL</a>, we’ll store the refresh token to the player’s metadata.</p>\n\n<h2 id=\"data-synchronizing\">Player’s data synchronizing</h2>\n<p>When a player with refresh token metadata joined this server again, we cannot determine whether this player is eligible immediately, but we would not bother this player until we confirmed that this player’s license has expired or revoked.<br />\nWe’ll do our reverify process in the background by using the refresh token from this player’s metadata to exchange a new pair of a new access token and a new refresh token from the token endpoint, which is standard OAuth2 procedure as well.<br />\nThen we reperform our request to license API and if legitimate, we’ll upload this player’s new login information. Otherwise, we’ll remove this player’s refresh token metadata, notify this player and kick this player from the server after 5 minutes, then call our unregister API with player’s UUID. If this player rejoins again, he will be asked for authorization just like a new player, except that all this player’s property remains.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Metadata are not persistent. None of them will exist after server restarts. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p>We moved Minecraft and go.ifengge.cn server under the same LAN eventually, then we did some trick on the link shorten API to reuse identical links. This did reduce many response time. <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"Table of Contents\n\n  Introducing the Rakish Land\n  Our auth flow\n  Creating an authorization URL\n  Receiving tokens\n  Verifying user’s eligibility\n  Player’s data synchronizing\n\n\nIntroducing the Rakish Land\nI’ve been working on starting a private Minecraft server these days, which is called the Rakish Land.\nAlthough whitelist and the Mojang account verifying is safe enough, they can neither prevent unknown players from joining our server nor synchronize player data to our own databases. Therefore, we’ll introduce our own authentication flow using OAuth 2.0.\n\nLet’s embrace Bukkit library\nFirstly, we have to decide between developing a server mod(using Forge) or a Bukkit plugin. Apparently, using a mod requires additional steps for users to connect to our systems, which might ruin players’ experience during preparation.\nBukkit, a great and stable server software that provides plugin supports, is our decision to program for. We started our development based on Bukkit’s APIs using pure Kotlin.\n\n\n  We used Gson, OkHttp, and Retrofit to queue our network requests.\n\n\nOur auth flow\nGiven our website has already supported OAuth 2 authorization flows, we just need to write our plugin side part as an OAuth 2 client.\nWe still want users to confirm their identity, therefore the Authorization Code Grant will be our authorization policy. All of our actions conform to the RFC 6749.\nWe’ll redirect new players to our authorize endpoint, use the authorization code to acquire access token and refresh token, use the access token to query players’ license, then save their refresh token using \tsetMetadata​(String metadataKey, MetadataValue newMetadataValue)1 method provided by Bukkit SDK.\nAs above, when a player joined our server, we’ll check if this player has metadata of refresh token. If not, we regard this player as a new player, then we lock this player’s location, inventory, experience, health, food level, and other attributes, and ask this player to authenticate.\n\nCreating an authorization URL\nConsidering authorization URLs to contain response_type, client_id, redirect_uri, state, etc, these URLs will be very long for humans to type. We used our link shorten APIs to simplify these URLs to the form of go.ifengge.cn/x and keep it for a day long.\nUsing a player’s UUID as the state parameter has two advantages. One is that we can easily identify user’s UUID when we try to request licenses, and the other reason, most importantly, we could build identical URLs for users to authorize(see how authorization URLs are built), then CloudFront2 could cache API’s respond to save link spaces, and decrease response time.\n\nReceiving tokens\nWhen a user authorized from our authorize endpoint, the authorize endpoint will redirect the user to a new URL with authorization code. We’ll use this code to exchange tokens from our token endpoint, this is standard.\nWe implemented a simple HTTP server integrated into the plugin jar so as to receive authorization code as the new URL mentioned above after user authorized, and the server will automatically start when Bukkit calls onEnable(). Then we used NGINX as a reverse proxy to cast https://api.ifengge.cn/minecraft/login/ to this simple server.\nThen the simple server has authorization code. In other words, our plugin has an authorization code to exchange tokens! Then we’ll do it by appending this code to our request to our token endpoint, and if we succeed(User might reject the authorize request, or be blocked during the authorize flow), we get both access token and refresh token.\n\nVerifying user’s eligibility\nWe’ll attach the access token to our user account APIs to check whether this user has access to our server, download Dalvik’s Club ID profile, and register this player’s Mojang profile to our database.\nAs mentioned in Creating an authorization URL, we’ll store the refresh token to the player’s metadata.\n\nPlayer’s data synchronizing\nWhen a player with refresh token metadata joined this server again, we cannot determine whether this player is eligible immediately, but we would not bother this player until we confirmed that this player’s license has expired or revoked.\nWe’ll do our reverify process in the background by using the refresh token from this player’s metadata to exchange a new pair of a new access token and a new refresh token from the token endpoint, which is standard OAuth2 procedure as well.\nThen we reperform our request to license API and if legitimate, we’ll upload this player’s new login information. Otherwise, we’ll remove this player’s refresh token metadata, notify this player and kick this player from the server after 5 minutes, then call our unregister API with player’s UUID. If this player rejoins again, he will be asked for authorization just like a new player, except that all this player’s property remains.\n\n\n  \n    \n      Metadata are not persistent. None of them will exist after server restarts. &#8617;&#xfe0e;\n    \n    \n      We moved Minecraft and go.ifengge.cn server under the same LAN eventually, then we did some trick on the link shorten API to reuse identical links. This did reduce many response time. &#8617;&#xfe0e;","languages":null,"categories":["note"],"tags":["notes"]},{"title":"HTAA Recruit Post","permalink":"https://gufeng.sh/work/htaa-recruit/","link":"https://gufeng.sh/work/htaa-recruit/","date":"2019-09-02T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p><a href=\"https://img.akacdn.app/image/X2aO\"><img src=\"https://img.akacdn.app/57800373b599b7f4beef0cb9ab9df1a3.png\" alt=\"\" /></a>\nHTAA is an abbreviation of the Hardware Technology and Application Association.</p>","excerpt":"HTAA is an abbreviation of the Hardware Technology and Application Association.","languages":null,"categories":["work"],"tags":["works_graphic"]},{"title":"Calendarista","permalink":"https://gufeng.sh/work/calendarista/","link":"https://gufeng.sh/work/calendarista/","date":"2019-08-20T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 id=\"intro\">Intro</h2>\n<p>This tool will provide you a way to subscribe to students’ class schedules on your calendar on PCs, mailboxes or iCloud devices. Thereby you can get informed about forthcoming classes via notification, including the professor’s name, classroom it will take place and the exact time.</p>\n\n<p>Also, subscribing to a calendar means classes can be auto-updated. You will never bother with semester changes or temporary class adjustments as long as they are updated by the academic affairs office.</p>\n\n<p>As an inadvertent advantage, students can subscribe to multiple class tables with one device, therefore you can add with your friend’s schedule together and compare leisures easily.</p>\n\n<h2 id=\"under-the-hood\">Under the hood</h2>\n<p>The working mechanism is quite straightforward. The server will simply return an iCalendar<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> file contains all your class schedules over the semester.\nYour calendar provider will re-download this iCalendar file periodically in order to provide you an updated schedule.</p>\n\n<h2 id=\"further-usages\">Further Usages</h2>\n<p>Benefited by integrating the schedule into the iOS calendar, I found there are many feasible ways to exploit usages:</p>\n<ul>\n  <li>I can synchronize schedules and along with their alarms with Apple Watch and Mac without any additional setup.</li>\n  <li>I can ask HomePod about the next class.</li>\n  <li>It is very convenient to share the entire schedule with friends, who can preview it in Safari without adding.</li>\n  <li>Collaborating with Shortcuts.app makes things easier. I created a <a href=\"https://www.icloud.com/shortcuts/281c37cf09e3450e9ae98782448ae55a\">shortcut</a> to set a wakeup alarm based on the time of the first class of the next day.</li>\n  <li>It is separated from other schedules, therefore you can control the visibility of class schedules in your calendar. Additionally, you can retrieve schedules using <a href=\"https://developer.apple.com/documentation/eventkit/ekeventstore\"><code class=\"language-plaintext highlighter-rouge\">EKEventStore.calendar(withIdentifier:)</code></a> if you are going to develop your own app.</li>\n</ul>\n\n<h2 id=\"usage\">Usage</h2>\n<p class=\"largetype\"><a href=\"https://docs.ifengge.cn/display/site/CQUPT+APIs\">View on Dalvik’s API Docs</a></p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p><a href=\"https://en.wikipedia.org/wiki/ICalendar\">iCalendar - Wikipedia</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"Intro\nThis tool will provide you a way to subscribe to students’ class schedules on your calendar on PCs, mailboxes or iCloud devices. Thereby you can get informed about forthcoming classes via notification, including the professor’s name, classroom it will take place and the exact time.\n\nAlso, subscribing to a calendar means classes can be auto-updated. You will never bother with semester changes or temporary class adjustments as long as they are updated by the academic affairs office.\n\nAs an inadvertent advantage, students can subscribe to multiple class tables with one device, therefore you can add with your friend’s schedule together and compare leisures easily.\n\nUnder the hood\nThe working mechanism is quite straightforward. The server will simply return an iCalendar1 file contains all your class schedules over the semester.\nYour calendar provider will re-download this iCalendar file periodically in order to provide you an updated schedule.\n\nFurther Usages\nBenefited by integrating the schedule into the iOS calendar, I found there are many feasible ways to exploit usages:\n\n  I can synchronize schedules and along with their alarms with Apple Watch and Mac without any additional setup.\n  I can ask HomePod about the next class.\n  It is very convenient to share the entire schedule with friends, who can preview it in Safari without adding.\n  Collaborating with Shortcuts.app makes things easier. I created a shortcut to set a wakeup alarm based on the time of the first class of the next day.\n  It is separated from other schedules, therefore you can control the visibility of class schedules in your calendar. Additionally, you can retrieve schedules using EKEventStore.calendar(withIdentifier:) if you are going to develop your own app.\n\n\nUsage\nView on Dalvik’s API Docs\n\n\n  \n    \n      iCalendar - Wikipedia &#8617;&#xfe0e;","languages":null,"categories":["work"],"tags":["works_personal"]},{"title":"Shots on Travel","permalink":"https://gufeng.sh/work/travel-shots/","link":"https://gufeng.sh/work/travel-shots/","date":"2019-08-11T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 id=\"wuhu-anhui--china\">Wuhu, Anhui • China</h2>\n<p class=\"largetype\"><a href=\"https://img.ifengge.cn/album/gJg\">View in Gallery</a></p>\n\n<h2 id=\"zhenjiang-jiangsu--china\">Zhenjiang, Jiangsu • China</h2>\n<p class=\"largetype\"><a href=\"https://img.ifengge.cn/album/7da\">View in Gallery</a></p>\n\n<h2 id=\"changsha-hunan--china\">Changsha, Hunan • China</h2>\n<p class=\"largetype\"><a href=\"https://img.ifengge.cn/album/izS\">View in Gallery</a></p>","excerpt":"Wuhu, Anhui • China\nView in Gallery\n\nZhenjiang, Jiangsu • China\nView in Gallery\n\nChangsha, Hunan • China\nView in Gallery","languages":null,"categories":["work"],"tags":["works_photo"]},{"title":"Notes on Discrete Mathematics","permalink":"https://gufeng.sh/note/notes-on-discrete-math/","link":"https://gufeng.sh/note/notes-on-discrete-math/","date":"2019-07-10T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>I summarized some core mind of Discrete Mathematics, which is not so hard per se, but in textbooks, it is always described in a profound language.</p>\n\n<p>It worth noting that this note does not contain any algorithms.</p>\n\n<h3 id=\"graph-theory\">Graph Theory</h3>\n<p class=\"largetype\"><a href=\"http://drive.ifengge.cn/s/9eL3BgXBHT3BPTA\">Browse Files ➡︎</a></p>","excerpt":"I summarized some core mind of Discrete Mathematics, which is not so hard per se, but in textbooks, it is always described in a profound language.\n\nIt worth noting that this note does not contain any algorithms.\n\nGraph Theory\nBrowse Files ➡︎","languages":null,"categories":["note"],"tags":["notes"]},{"title":"RIME - An Intelligent Multi-Language IME","permalink":"https://gufeng.sh/note/introducing-rime/","link":"https://gufeng.sh/note/introducing-rime/","date":"2019-07-06T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 id=\"whats-this\">What’s This?</h2>\n<p>In a general word, this is an Input Engine that could handle any languages in the world rather than just an Input Method, ergo it can handle Emoji, Greek Alphabets, Symbols, and any Unicode characters easefully, and of course, it is super fast.<br />\nIt is also fun that this IME requires dozens of customizing via editing configuration files.</p>\n\n<h2 id=\"symbol-suggestions\">Symbol Suggestions</h2>\n<p><img src=\"https://img.akacdn.app/5ae7ad79efdf526da83c4faa3958f0c0.png\" alt=\"\" class=\"size-right no-resize\" />\nIf you type a symbol like 「?」, RIME will suggest you both full and half-width symbol of 「?」, as well as other forms of which in Unicode, such as 「¿」,「‽」, and 「⸘」.</p>\n<h6 id=\"_pinyin_simpcustomyaml\">_pinyin_simp.custom.yaml</h6>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">patch</span><span class=\"pi\">:</span>\n  <span class=\"na\">punctuator</span><span class=\"pi\">:</span>\n    <span class=\"na\">half_shape</span><span class=\"pi\">:</span>\n        <span class=\"s2\">\"</span><span class=\"s\">?\"</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">？\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">?\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">¿\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">‽\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">⸘\"</span><span class=\"pi\">]</span>\n\n</code></pre></div></div>\n<h2 id=\"custom-shortcuts\">Custom Shortcuts</h2>\n<p><img src=\"https://img.akacdn.app/28607c7a7a8a65c598479b61171e8c24.png\" alt=\"\" class=\"size-left no-resize\" />\nYou can even customize dictionary to provide shortcuts, which means you can type <code class=\"language-plaintext highlighter-rouge\">/em</code> to enter frequently used Emojis, or <code class=\"language-plaintext highlighter-rouge\">/ar</code> to type arrows</p>\n<h6 id=\"_pinyin_simpcustomyaml-1\">_pinyin_simp.custom.yaml</h6>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">patch</span><span class=\"pi\">:</span>\n  <span class=\"na\">punctuator</span><span class=\"pi\">:</span>\n    <span class=\"na\">symbols</span><span class=\"pi\">:</span>\n      <span class=\"s2\">\"</span><span class=\"s\">/em\"</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"nv\">😀</span><span class=\"pi\">,</span><span class=\"nv\">😁</span><span class=\"pi\">,</span><span class=\"nv\">😂</span><span class=\"pi\">,</span><span class=\"nv\">😃</span><span class=\"pi\">,</span><span class=\"nv\">😄</span><span class=\"pi\">,</span><span class=\"nv\">😅</span><span class=\"pi\">,</span><span class=\"nv\">😆</span><span class=\"pi\">,</span><span class=\"nv\">😉</span><span class=\"pi\">,</span><span class=\"nv\">😊</span><span class=\"pi\">,</span><span class=\"nv\">😋</span><span class=\"pi\">,</span><span class=\"nv\">😎</span><span class=\"pi\">,</span><span class=\"nv\">😍</span><span class=\"pi\">,</span><span class=\"nv\">😘</span><span class=\"pi\">,</span><span class=\"nv\">😗</span><span class=\"pi\">,</span><span class=\"nv\">😙</span><span class=\"pi\">,</span><span class=\"nv\">😚</span><span class=\"pi\">,</span><span class=\"nv\">😇</span><span class=\"pi\">,</span><span class=\"nv\">😐</span><span class=\"pi\">,</span><span class=\"nv\">😑</span><span class=\"pi\">,</span><span class=\"nv\">😶</span><span class=\"pi\">,</span><span class=\"nv\">😏</span><span class=\"pi\">,</span><span class=\"nv\">😣</span><span class=\"pi\">,</span><span class=\"nv\">😥</span><span class=\"pi\">,</span><span class=\"nv\">😮</span><span class=\"pi\">,</span><span class=\"nv\">😯</span><span class=\"pi\">,</span><span class=\"nv\">😪</span><span class=\"pi\">,</span><span class=\"nv\">😫</span><span class=\"pi\">,</span><span class=\"nv\">😴</span><span class=\"pi\">,</span><span class=\"nv\">😌</span><span class=\"pi\">,</span><span class=\"nv\">😛</span><span class=\"pi\">,</span><span class=\"nv\">😜</span><span class=\"pi\">,</span><span class=\"nv\">😝</span><span class=\"pi\">,</span><span class=\"nv\">😒</span><span class=\"pi\">,</span><span class=\"nv\">😓</span><span class=\"pi\">,</span><span class=\"nv\">😔</span><span class=\"pi\">,</span><span class=\"nv\">😕</span><span class=\"pi\">,</span><span class=\"nv\">😲</span><span class=\"pi\">,</span><span class=\"nv\">😷</span><span class=\"pi\">,</span><span class=\"nv\">😖</span><span class=\"pi\">,</span><span class=\"nv\">😞</span><span class=\"pi\">,</span><span class=\"nv\">😟</span><span class=\"pi\">,</span><span class=\"nv\">😤</span><span class=\"pi\">,</span><span class=\"nv\">😢</span><span class=\"pi\">,</span><span class=\"nv\">😭</span><span class=\"pi\">,</span><span class=\"nv\">😦</span><span class=\"pi\">,</span><span class=\"nv\">😧</span><span class=\"pi\">,</span><span class=\"nv\">😨</span><span class=\"pi\">,</span><span class=\"nv\">😬</span><span class=\"pi\">,</span><span class=\"nv\">😰</span><span class=\"pi\">,</span><span class=\"nv\">😱</span><span class=\"pi\">,</span><span class=\"nv\">😳</span><span class=\"pi\">,</span><span class=\"nv\">😵</span><span class=\"pi\">,</span><span class=\"nv\">😡</span><span class=\"pi\">,</span><span class=\"nv\">😠</span><span class=\"pi\">]</span>\n      <span class=\"s2\">\"</span><span class=\"s\">/ar\"</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"nv\">⬆</span><span class=\"pi\">,</span><span class=\"nv\">↗</span><span class=\"pi\">,</span><span class=\"nv\">➡</span><span class=\"pi\">,</span><span class=\"nv\">↘</span><span class=\"pi\">,</span><span class=\"nv\">⬇</span><span class=\"pi\">,</span><span class=\"nv\">↙</span><span class=\"pi\">,</span><span class=\"nv\">⬅</span><span class=\"pi\">,</span><span class=\"nv\">↖</span><span class=\"pi\">,</span><span class=\"nv\">↕</span><span class=\"pi\">,</span><span class=\"nv\">↔</span><span class=\"pi\">,</span><span class=\"nv\">↩</span><span class=\"pi\">,</span><span class=\"nv\">↪</span><span class=\"pi\">,</span><span class=\"nv\">⤴</span><span class=\"pi\">,</span><span class=\"nv\">⤵</span><span class=\"pi\">,</span><span class=\"nv\">🔃</span><span class=\"pi\">,</span><span class=\"nv\">🔄</span><span class=\"pi\">,</span><span class=\"nv\">🔙</span><span class=\"pi\">,</span><span class=\"nv\">🔚</span><span class=\"pi\">,</span><span class=\"nv\">🔛</span><span class=\"pi\">,</span><span class=\"nv\">🔜</span><span class=\"pi\">,</span><span class=\"nv\">🔝</span><span class=\"pi\">]</span>\n      <span class=\"s2\">\"</span><span class=\"s\">/pc\"</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"nv\">⌘</span><span class=\"pi\">,</span> <span class=\"nv\">⌥</span><span class=\"pi\">,</span> <span class=\"nv\">⇧</span><span class=\"pi\">,</span> <span class=\"nv\">⌃</span><span class=\"pi\">,</span> <span class=\"nv\">⎋</span><span class=\"pi\">,</span> <span class=\"nv\">⇪</span><span class=\"pi\">,</span> <span class=\"nv\"></span><span class=\"pi\">,</span> <span class=\"nv\">⌫</span><span class=\"pi\">,</span> <span class=\"nv\">⌦</span><span class=\"pi\">,</span> <span class=\"nv\">↩︎</span><span class=\"pi\">,</span> <span class=\"nv\">⏎</span><span class=\"pi\">,</span> <span class=\"nv\">↑</span><span class=\"pi\">,</span> <span class=\"nv\">↓</span><span class=\"pi\">,</span> <span class=\"nv\">←</span><span class=\"pi\">,</span> <span class=\"nv\">→</span><span class=\"pi\">,</span> <span class=\"nv\">↖</span><span class=\"pi\">,</span> <span class=\"nv\">↘</span><span class=\"pi\">,</span> <span class=\"nv\">⇟</span><span class=\"pi\">,</span> <span class=\"nv\">⇞</span><span class=\"pi\">]</span>\n</code></pre></div></div>\n\n<h2 id=\"quick-menu\">Quick Menu</h2>\n<p><img src=\"https://img.akacdn.app/39226827eded528c633e88445f14a898.png\" alt=\"\" class=\"size-right no-resize\" />\nDefaultly, to reach out this menu you just need to press <code class=\"language-plaintext highlighter-rouge\">Control(⌃) + `</code></p>\n\n<p>This menu provides several options to change input maneuver, which provides flavored input methods and different language supports. In the submenu of each engine, its option can be fully customized.</p>\n\n<p>This menu can switch between languages, full or half-width for symbols, suggest Emojis by words or not and even encodings!</p>\n\n<p>After a configuration file has been changed, press <code class=\"language-plaintext highlighter-rouge\">⌃ + ⌥ + `</code> to take effects.</p>\n\n<h2 id=\"mixed-typing--super-fast\">Mixed Typing &amp; Super Fast</h2>\n<p>These pictures demonstrated RIME’s mixed input ability. With dictionary customize, RIME can offer special characters input by regular 26 keys. Additional, RIME is super fast either. Its react speed taken me aback when I have my dictionary over 50000 words.</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\"> </th>\n      <th style=\"text-align: center\"> </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\">English and Chinese</td>\n      <td style=\"text-align: center\">Emoji by words</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"https://img.akacdn.app/a1759048c6440e677b9a995d9bd5ba57.png\" alt=\"eng\" class=\"no-resize\" /></td>\n      <td style=\"text-align: center\"><img src=\"https://img.akacdn.app/126422ef2331c59b6f44852c8f2561d5.png\" alt=\"emoji\" class=\"no-resize\" /></td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\">Phonetic</td>\n      <td style=\"text-align: center\">Jargons</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"https://img.akacdn.app/82e7a96c5b19ec3fa70e7e1f2e9fd671.png\" alt=\"phonetic\" class=\"no-resize\" /></td>\n      <td style=\"text-align: center\"><img src=\"https://img.akacdn.app/0344279d9a3b800abc76bc97cc036ce0.png\" alt=\"dic\" class=\"no-resize\" /></td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"intelligent-ime-knows-my-mind\">Intelligent IME Knows My Mind</h2>\n<p>Multiple language users always have trouble in switching IMEs since they might want to type different languages in different apps. \nRIME will remember what input maneuver is used in each app latestly, and it will adapt apps in the next time.</p>\n\n<p>It can recognize Vim, iTerm, Alfred, etc by default. Besides, you can define it explicitly in configuration files.</p>\n\n<h2 id=\"misc\">MISC</h2>\n<p class=\"largetype\"><a href=\"https://rime.im/\">Official Site</a></p>","excerpt":"What’s This?\nIn a general word, this is an Input Engine that could handle any languages in the world rather than just an Input Method, ergo it can handle Emoji, Greek Alphabets, Symbols, and any Unicode characters easefully, and of course, it is super fast.\nIt is also fun that this IME requires dozens of customizing via editing configuration files.\n\nSymbol Suggestions\n\nIf you type a symbol like 「?」, RIME will suggest you both full and half-width symbol of 「?」, as well as other forms of which in Unicode, such as 「¿」,「‽」, and 「⸘」.\n_pinyin_simp.custom.yaml\npatch:\n  punctuator:\n    half_shape:\n        \"?\": [\"？\", \"?\", \"¿\", \"‽\", \"⸘\"]\n\n\nCustom Shortcuts\n\nYou can even customize dictionary to provide shortcuts, which means you can type /em to enter frequently used Emojis, or /ar to type arrows\n_pinyin_simp.custom.yaml\npatch:\n  punctuator:\n    symbols:\n      \"/em\": [😀,😁,😂,😃,😄,😅,😆,😉,😊,😋,😎,😍,😘,😗,😙,😚,😇,😐,😑,😶,😏,😣,😥,😮,😯,😪,😫,😴,😌,😛,😜,😝,😒,😓,😔,😕,😲,😷,😖,😞,😟,😤,😢,😭,😦,😧,😨,😬,😰,😱,😳,😵,😡,😠]\n      \"/ar\": [⬆,↗,➡,↘,⬇,↙,⬅,↖,↕,↔,↩,↪,⤴,⤵,🔃,🔄,🔙,🔚,🔛,🔜,🔝]\n      \"/pc\": [⌘, ⌥, ⇧, ⌃, ⎋, ⇪, , ⌫, ⌦, ↩︎, ⏎, ↑, ↓, ←, →, ↖, ↘, ⇟, ⇞]\n\n\nQuick Menu\n\nDefaultly, to reach out this menu you just need to press Control(⌃) + `\n\nThis menu provides several options to change input maneuver, which provides flavored input methods and different language supports. In the submenu of each engine, its option can be fully customized.\n\nThis menu can switch between languages, full or half-width for symbols, suggest Emojis by words or not and even encodings!\n\nAfter a configuration file has been changed, press ⌃ + ⌥ + ` to take effects.\n\nMixed Typing &amp; Super Fast\nThese pictures demonstrated RIME’s mixed input ability. With dictionary customize, RIME can offer special characters input by regular 26 keys. Additional, RIME is super fast either. Its react speed taken me aback when I have my dictionary over 50000 words.\n\n\n  \n    \n       \n       \n    \n  \n  \n    \n      English and Chinese\n      Emoji by words\n    \n    \n      \n      \n    \n    \n      Phonetic\n      Jargons\n    \n    \n      \n      \n    \n  \n\n\nIntelligent IME Knows My Mind\nMultiple language users always have trouble in switching IMEs since they might want to type different languages in different apps. \nRIME will remember what input maneuver is used in each app latestly, and it will adapt apps in the next time.\n\nIt can recognize Vim, iTerm, Alfred, etc by default. Besides, you can define it explicitly in configuration files.\n\nMISC\nOfficial Site","languages":null,"categories":["note"],"tags":["notes"]},{"title":"A Font Born With Barcodes","permalink":"https://gufeng.sh/note/a-font-born-with-barcodes/","link":"https://gufeng.sh/note/a-font-born-with-barcodes/","date":"2019-03-19T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<link href=\"https://fonts.googleapis.com/css?family=Libre+Barcode+128+Text\" rel=\"stylesheet\" />\n\n<h2 id=\"preview\">Preview</h2>\n<barcode>This is my #1 blog</barcode>\n\n<h2 id=\"intro\">Intro</h2>\n<p>This font family is named <code class=\"language-plaintext highlighter-rouge\">Libre Barcode</code>.<br />\nFind it on <a href=\"https://fonts.google.com/?query=Libre+Barcode\">Google Fonts</a>.</p>","excerpt":"Preview\nThis is my #1 blog\n\nIntro\nThis font family is named Libre Barcode.\nFind it on Google Fonts.","languages":null,"categories":["note"],"tags":["notes"]},{"title":"CTAS Debugger","permalink":"https://gufeng.sh/work/ctas-debugger/","link":"https://gufeng.sh/work/ctas-debugger/","date":"2018-12-24T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>A Debug Tool for <a href=\"http://172.20.2.205.cqu.pt/ctas/\">CTAS Student System</a>. This tool includes support of both macOS and Windows, and it is ready to install in an offline environment.</p>\n\n<h3 id=\"license\">License</h3>\n\n<p>This program is made by <a href=\"https://gufeng.sh/about/\">Gufeng Shen</a>. All rights reserved and commercial use is prohibited.</p>\n\n<p>This program is a crack of the CTAS Student System(internal-use only). As such, it is not subject to university regulations. Use at your own risk.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<ul>\n  <li>Edit codes directly in the webpage</li>\n  <li>Run instantly</li>\n  <li>Compile/Link error outputs</li>\n  <li>Hide everything on Windows, neither a Taskbar icon nor a console window will be displayed</li>\n  <li>Save your outputs for 5 seconds after a successfully run, then everything will disappear again</li>\n  <li>Copy your codes automatically</li>\n  <li>Fix page control bar</li>\n  <li>Multiple file problems support</li>\n  <li>Unlock copying, selecting and context menu in every CTAS pages</li>\n  <li>Use shortcut keys to complete your homework!</li>\n  <li>APIs available and an iOS remote client is included. You can also custom your remote control on other platforms.</li>\n</ul>\n\n<h2 id=\"installation\">Installation</h2>\n\n<h3 id=\"windows\">Windows</h3>\n<p>Run install.bat and follow the instructions to install.</p>\n\n<blockquote>\n  <p>Be aware! Offline installation is only available on Windows.</p>\n</blockquote>\n\n<h3 id=\"macos\">macOS</h3>\n<p>If you are a macOS user, make sure <a href=\"https://www.python.org/download/releases/3.0/\">Python 3</a> is installed on your system, then run the command below in the terminal.</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pip3 install -r requirements.txt\n</code></pre></div></div>\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<p>This is a guide only tested on <a href=\"https://dl.google.com\">Google Chrome v70</a>.</p>\n\n<ul>\n  <li>\n    <p><strong>Before you logged in, turn on Developer Tools ( ⌥⌘I or Ctrl+Shift+I )</strong></p>\n  </li>\n  <li>Follow the regular steps and load a question.</li>\n  <li>Run __main__.pyw\n    <ul>\n      <li>Windows: Double click, and a black window will flashing past</li>\n      <li>macOS: Run <code class=\"language-plaintext highlighter-rouge\">pyhton3 __main__.pyw</code> in the terminal</li>\n    </ul>\n  </li>\n  <li>Switch to the <code class=\"language-plaintext highlighter-rouge\">Console</code> Tab</li>\n  <li>Change the Javascript contexts dropdown to <code class=\"language-plaintext highlighter-rouge\">IFrame - main (CPractice.aspx)</code></li>\n  <li>Paste everything in index.min.js then press <code class=\"language-plaintext highlighter-rouge\">Enter</code></li>\n  <li>Awala! You are a cheater now!</li>\n</ul>\n\n<h2 id=\"usage\">Usage</h2>\n\n<h4 id=\"keymaps\">Keymaps</h4>\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Function</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">Q</code></td>\n      <td>Select answer A</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">W</code></td>\n      <td>Select answer B</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">E</code></td>\n      <td>Select answer C</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">R</code></td>\n      <td>Select answer D</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">T</code></td>\n      <td>Run code</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">A</code></td>\n      <td>Previous question</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">S</code></td>\n      <td>Subsequent question</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">G</code></td>\n      <td>Navigate to bottom</td>\n    </tr>\n    <tr>\n      <td><code class=\"language-plaintext highlighter-rouge\">g</code></td>\n      <td>Navigate to top</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"select-and-debug\">Select and debug</h4>\n\n<p>You can just copy or select something as usual. Then run and debug with Visual Studio, LLDB or something else you like.</p>\n\n<h4 id=\"edit\">Edit</h4>\n<p>You can edit codes in the webpage by just click on the code section.</p>\n\n<p>CTAS-Debugger will handle your modification and write it to your clipboard automatically.</p>\n\n<h4 id=\"run\">Run</h4>\n\n<p>Follow the injected message and you’ll see a <code class=\"language-plaintext highlighter-rouge\">run</code> button when your code is ready.</p>","excerpt":"A Debug Tool for CTAS Student System. This tool includes support of both macOS and Windows, and it is ready to install in an offline environment.\n\nLicense\n\nThis program is made by Gufeng Shen. All rights reserved and commercial use is prohibited.\n\nThis program is a crack of the CTAS Student System(internal-use only). As such, it is not subject to university regulations. Use at your own risk.\n\nFeatures\n\n\n  Edit codes directly in the webpage\n  Run instantly\n  Compile/Link error outputs\n  Hide everything on Windows, neither a Taskbar icon nor a console window will be displayed\n  Save your outputs for 5 seconds after a successfully run, then everything will disappear again\n  Copy your codes automatically\n  Fix page control bar\n  Multiple file problems support\n  Unlock copying, selecting and context menu in every CTAS pages\n  Use shortcut keys to complete your homework!\n  APIs available and an iOS remote client is included. You can also custom your remote control on other platforms.\n\n\nInstallation\n\nWindows\nRun install.bat and follow the instructions to install.\n\n\n  Be aware! Offline installation is only available on Windows.\n\n\nmacOS\nIf you are a macOS user, make sure Python 3 is installed on your system, then run the command below in the terminal.\n$ pip3 install -r requirements.txt\n\n\nGetting Started\n\nThis is a guide only tested on Google Chrome v70.\n\n\n  \n    Before you logged in, turn on Developer Tools ( ⌥⌘I or Ctrl+Shift+I )\n  \n  Follow the regular steps and load a question.\n  Run __main__.pyw\n    \n      Windows: Double click, and a black window will flashing past\n      macOS: Run pyhton3 __main__.pyw in the terminal\n    \n  \n  Switch to the Console Tab\n  Change the Javascript contexts dropdown to IFrame - main (CPractice.aspx)\n  Paste everything in index.min.js then press Enter\n  Awala! You are a cheater now!\n\n\nUsage\n\nKeymaps\n\n\n  \n    \n      Key\n      Function\n    \n  \n  \n    \n      Q\n      Select answer A\n    \n    \n      W\n      Select answer B\n    \n    \n      E\n      Select answer C\n    \n    \n      R\n      Select answer D\n    \n    \n      T\n      Run code\n    \n    \n      A\n      Previous question\n    \n    \n      S\n      Subsequent question\n    \n    \n      G\n      Navigate to bottom\n    \n    \n      g\n      Navigate to top\n    \n  \n\n\nSelect and debug\n\nYou can just copy or select something as usual. Then run and debug with Visual Studio, LLDB or something else you like.\n\nEdit\nYou can edit codes in the webpage by just click on the code section.\n\nCTAS-Debugger will handle your modification and write it to your clipboard automatically.\n\nRun\n\nFollow the injected message and you’ll see a run button when your code is ready.","languages":null,"categories":["work"],"tags":["works_community"]},{"title":"What is DNS","permalink":"https://gufeng.sh/note/dns/","link":"https://gufeng.sh/note/dns/","date":"2018-02-02T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>国内有关现代的 DNS 中文资料少之又少，对 DNS 的了解大都仅限于 A - AAAA 之间，我就在此将这些坑记下吧。</p>\n\n<blockquote>\n  <p><strong>网域名称系统</strong>（英文：<strong>Domain Name System</strong>，缩写：DNS）是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 端口 53。当前，对于每一级域名长度的限制是 63 个字符，域名总长度则不能超过 253 个字符。</p>\n</blockquote>\n\n<h2 class=\"no_toc\" id=\"table-of-contents\">Table of Contents</h2>\n<ul id=\"markdown-toc\">\n  <li><a href=\"#domain-level\" id=\"markdown-toc-domain-level\">根、顶和二级域名</a></li>\n  <li><a href=\"#glue-records\" id=\"markdown-toc-glue-records\">胶水记录</a></li>\n  <li><a href=\"#dnssec\" id=\"markdown-toc-dnssec\">DNSSEC：RRSIG 和 DS 记录</a></li>\n  <li><a href=\"#soa\" id=\"markdown-toc-soa\">NS 和 SOA 记录</a></li>\n  <li><a href=\"#ptr\" id=\"markdown-toc-ptr\">PTR 反向解析记录</a></li>\n  <li><a href=\"#dane\" id=\"markdown-toc-dane\">DANE：TLSA 记录与 DNSSEC 的搭配</a></li>\n  <li><a href=\"#cname-flattening\" id=\"markdown-toc-cname-flattening\">CNAME Flattening</a></li>\n  <li><a href=\"#ttl\" id=\"markdown-toc-ttl\">TTL 缓存时间</a></li>\n</ul>\n\n<h2 id=\"domain-level\">根、顶和二级域名</h2>\n<p>使用 dig 软件查询一个域名 <code class=\"language-plaintext highlighter-rouge\">dig example.com</code> ：\n<img src=\"https://img.akacdn.app/71104f9479a8bf08b75e9c57d1002ea8.png\" alt=\"71104f9479a8bf08b75e9c57d1002ea8.png\" /></p>\n<ol>\n  <li>会发现诸如 <code class=\"language-plaintext highlighter-rouge\">example.com</code> 的域名并不完整，它的完整写法是 <code class=\"language-plaintext highlighter-rouge\">example.com.</code> 。最后的这一个点就是<strong>根域名</strong>。\n在日常使用中，因为所有的域名都带有这一个点，我们通常就将其省略。如果为这个命令加上一个 <code class=\"language-plaintext highlighter-rouge\">+trace</code> 参数，就可以看到它首先会查询 “<code class=\"language-plaintext highlighter-rouge\">.</code>” 这个域名。而全球的 13 台根域名服务器 (Alternative DNS root) 的 IP 地址往往被硬编码在操作系统中。</li>\n  <li>然后 dig 软件会向根域名服务器查询 <code class=\"language-plaintext highlighter-rouge\">com.</code> 域名的域名服务器，这里的 com（类似的有 cn, hk, me 等）就是 <strong>顶级域名（TLD）</strong>。你可以注册顶级域名<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> ，但其条件要求十分苛刻。顶级域名一般由大公司从 ICANN 购买，购买后大公司就有资格建立如 <code class=\"language-plaintext highlighter-rouge\">com.</code> 的域名服务器，并录入到根域名系统中。</li>\n  <li>再然后就是我们喜闻乐见的 <strong>二级域名（SLD）</strong>了，二级域名注册得最多，也相对便宜。原因是顶级域名提供商可以提供几乎无限的二级域名，这里的 example 就是二级域名。</li>\n</ol>\n\n<p>与这个逻辑类似的，如果你有了一个二级域名，其下级域名你就可以随意定义。</p>\n\n<h2 id=\"glue-records\">胶水记录</h2>\n<p>如果你购买过域名，你也许就为你的域名设置过 DNS 服务器（nameservers），这些服务器将负责你的域名的解析工作。那么，如果域名服务器用了域名，域名服务器的域名该如何解析呢？<br />\n这就要提到 <strong>胶水记录（glue records）</strong>了，胶水记录在注册商填写，是向上级域名数据库中添加指定主机的 A 或 AAAA 记录。也就是说，查询域名服务器的地址应当去上一级域名的域名服务器中查询。通常这个主机记录不能当作普通 DNS 使用，因为浏览器并不会查询胶水记录。</p>\n\n<h2 id=\"dnssec\">DNSSEC：RRSIG 和 DS 记录</h2>\n<p>DNS 协议并不安全，正如 HTTP 一样。而 DNSSEC 的目的就引入了非对称加密技术到 DNS 查询的过程当中。<br />\n在启用了 DNSSEC 的域名，Whois 记录会显示 DNSSEC 的状态，而 DS（Delegation Signer）记录保存在上级域名服务器中，它显示了公钥的 Hash 值。在每次查询中都会返回一个 RRSIG 记录，这个记录是自动使用私钥加密后的结果，也就是说只能通过你发布的公钥（即 DNSKEY，发布在上级域名服务器的 DS 记录中）解密，这就保证了传输的安全性。\n<img src=\"https://img.akacdn.app/cceb953c733c04f632474f63f144994c.png\" alt=\"cceb953c733c04f632474f63f144994c.png\" /></p>\n\n<h2 id=\"soa\">NS 和 SOA 记录</h2>\n<p>SOA 的记录确定了一个 Zone（可以简单理解成一个域名）的开始，它包含了一个主要的权威域名服务器、邮箱和 TTL 等内容。而 NS 记录则保存着该域名的主要和备用权威域名服务器。</p>\n\n<h2 id=\"ptr\">PTR 反向解析记录</h2>\n<p>PTR 记录听上去非常抽象，但是它其实很简单！PTR 记录是将 IP 地址翻译成域名的记录，常用于垃圾邮件或者服务器位置鉴定。<br />\n世界上有一种不常出现在公众视野的顶级域名：<code class=\"language-plaintext highlighter-rouge\">arpa.</code>，而 <code class=\"language-plaintext highlighter-rouge\">in-addr.arpa</code> 和 <code class=\"language-plaintext highlighter-rouge\">ip6.arpa</code>，用于对应IPv4和IPv6的DNS反向查询功能。<br />\n如果要查询 1.2.3.4 对应什么域名，只需要查询 <code class=\"language-plaintext highlighter-rouge\">4.3.2.1.in-addr.arpa</code>. 的 PTR 记录即可。有意思的是，在域名中每个八位对应的数字顺序是反过来的，而这和 IP 地址的构成有关。<br />\n拥有 IP 的运营商只需要提供自己所在网段的 DNS 反向解析服务就好。如果你是租赁的 VPS，则 VPS 控制面板一般可以设置。\n<img src=\"https://img.akacdn.app/a287553b8174cd62abbd9f55bc36338d.png\" alt=\"a287553b8174cd62abbd9f55bc36338d.png\" /></p>\n\n<h2 id=\"dane\">DANE：TLSA 记录与 DNSSEC 的搭配</h2>\n<p>TLSA 记录体现了什么端口什么协议用的什么证书，只有启用了 DNSSEC 后才有意义。我认为和 HPKP 非常类似，差别在于 TLSA 记录不会被浏览器缓存。<br />\n配置好 TLSA 和 DNSSEC 后，就相当于为域名启用了 <strong>DANE（DNS-based Authentication of Named Entities）</strong>  ，DANE 的状态可以在 <a href=\"https://ssl-tools.net/\">SSL-Tools</a> 中检测。</p>\n\n<h2 id=\"cname-flattening\">CNAME Flattening</h2>\n<p>CNAME Flattening<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup> 是一项加速 DNS 解析的技术，可参见 <a href=\"https://blog.cloudflare.com/introducing-cname-flattening-rfc-compliant-cnames-at-a-domains-root/\">Introducing CNAME Flattening: RFC-Compliant CNAMEs at a Domain’s Root</a>，它的原理是将 CNAME 翻译成 A 记录的工作交给 DNS 服务器，这将大大节省 CNAME 域名的查询时间。目前的服务商（Rage4，Cloudflare）大都只支持根域名的 CNAME Flattening，但这不意味着这项技术只能用于根域名：如果你使用 Powerdns 自建 DNS，你会发现它的 ALIAS 记录对任何主机均适用。</p>\n\n<h2 id=\"ttl\">TTL 缓存时间</h2>\n<p><strong>TTL（Time- To-Live）</strong>在域名解析中表示了一条域名解析记录在 DNS 服务器上缓存的时间，单位为秒。也就是说，如果你希望减轻 DNS 服务器的负担，TTL 就应尽量长，如果希望在更换解析后反应时间短，TTL 就应尽量短。</p>\n\n<h2 class=\"no_toc\" id=\"references\">References</h2>\n<p><a href=\"https://zh.wikipedia.org/zh-hans/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F\">域名系统 - 维基百科，自由的百科全书</a><br />\n<a href=\"https://www.ibm.com/support/knowledgecenter/SSWSR9_11.6.0/com.ibm.mdshs.inspuser.doc/topics/c_inspuser_trigger_record_glue_record_differences.html\">IBM Knowledge Center - The difference between a trigger record and a glue record</a><br />\n<a href=\"https://tools.ietf.org/html/rfc4509\">RFC 4509 - Use of SHA-256 in DNSSEC Delegation Signer (DS) Resource Records (RRs)</a><br />\n<a href=\"https://tools.ietf.org/html/rfc2181\">RFC 2181 - Clarifications to the DNS Specification</a></p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>ICANN已在2015年允许注册顶级域名，但其条件和审查及其严格：<a href=\"https://newgtlds.icann.org/en/applicants/global-support/faqs/faqs-en\">Frequently-Asked-Questions-ICANN-New-gTLDs</a>. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p>部分DNS提供商称其为ANAME或其它名称，这是因为该标准并没有普及导致的命名不规范，通常也理解为私有类型。 <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>","excerpt":"国内有关现代的 DNS 中文资料少之又少，对 DNS 的了解大都仅限于 A - AAAA 之间，我就在此将这些坑记下吧。\n\n\n  网域名称系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 端口 53。当前，对于每一级域名长度的限制是 63 个字符，域名总长度则不能超过 253 个字符。\n\n\nTable of Contents\n\n  根、顶和二级域名\n  胶水记录\n  DNSSEC：RRSIG 和 DS 记录\n  NS 和 SOA 记录\n  PTR 反向解析记录\n  DANE：TLSA 记录与 DNSSEC 的搭配\n  CNAME Flattening\n  TTL 缓存时间\n\n\n根、顶和二级域名\n使用 dig 软件查询一个域名 dig example.com ：\n\n\n  会发现诸如 example.com 的域名并不完整，它的完整写法是 example.com. 。最后的这一个点就是根域名。\n在日常使用中，因为所有的域名都带有这一个点，我们通常就将其省略。如果为这个命令加上一个 +trace 参数，就可以看到它首先会查询 “.” 这个域名。而全球的 13 台根域名服务器 (Alternative DNS root) 的 IP 地址往往被硬编码在操作系统中。\n  然后 dig 软件会向根域名服务器查询 com. 域名的域名服务器，这里的 com（类似的有 cn, hk, me 等）就是 顶级域名（TLD）。你可以注册顶级域名1 ，但其条件要求十分苛刻。顶级域名一般由大公司从 ICANN 购买，购买后大公司就有资格建立如 com. 的域名服务器，并录入到根域名系统中。\n  再然后就是我们喜闻乐见的 二级域名（SLD）了，二级域名注册得最多，也相对便宜。原因是顶级域名提供商可以提供几乎无限的二级域名，这里的 example 就是二级域名。\n\n\n与这个逻辑类似的，如果你有了一个二级域名，其下级域名你就可以随意定义。\n\n胶水记录\n如果你购买过域名，你也许就为你的域名设置过 DNS 服务器（nameservers），这些服务器将负责你的域名的解析工作。那么，如果域名服务器用了域名，域名服务器的域名该如何解析呢？\n这就要提到 胶水记录（glue records）了，胶水记录在注册商填写，是向上级域名数据库中添加指定主机的 A 或 AAAA 记录。也就是说，查询域名服务器的地址应当去上一级域名的域名服务器中查询。通常这个主机记录不能当作普通 DNS 使用，因为浏览器并不会查询胶水记录。\n\nDNSSEC：RRSIG 和 DS 记录\nDNS 协议并不安全，正如 HTTP 一样。而 DNSSEC 的目的就引入了非对称加密技术到 DNS 查询的过程当中。\n在启用了 DNSSEC 的域名，Whois 记录会显示 DNSSEC 的状态，而 DS（Delegation Signer）记录保存在上级域名服务器中，它显示了公钥的 Hash 值。在每次查询中都会返回一个 RRSIG 记录，这个记录是自动使用私钥加密后的结果，也就是说只能通过你发布的公钥（即 DNSKEY，发布在上级域名服务器的 DS 记录中）解密，这就保证了传输的安全性。\n\n\nNS 和 SOA 记录\nSOA 的记录确定了一个 Zone（可以简单理解成一个域名）的开始，它包含了一个主要的权威域名服务器、邮箱和 TTL 等内容。而 NS 记录则保存着该域名的主要和备用权威域名服务器。\n\nPTR 反向解析记录\nPTR 记录听上去非常抽象，但是它其实很简单！PTR 记录是将 IP 地址翻译成域名的记录，常用于垃圾邮件或者服务器位置鉴定。\n世界上有一种不常出现在公众视野的顶级域名：arpa.，而 in-addr.arpa 和 ip6.arpa，用于对应IPv4和IPv6的DNS反向查询功能。\n如果要查询 1.2.3.4 对应什么域名，只需要查询 4.3.2.1.in-addr.arpa. 的 PTR 记录即可。有意思的是，在域名中每个八位对应的数字顺序是反过来的，而这和 IP 地址的构成有关。\n拥有 IP 的运营商只需要提供自己所在网段的 DNS 反向解析服务就好。如果你是租赁的 VPS，则 VPS 控制面板一般可以设置。\n\n\nDANE：TLSA 记录与 DNSSEC 的搭配\nTLSA 记录体现了什么端口什么协议用的什么证书，只有启用了 DNSSEC 后才有意义。我认为和 HPKP 非常类似，差别在于 TLSA 记录不会被浏览器缓存。\n配置好 TLSA 和 DNSSEC 后，就相当于为域名启用了 DANE（DNS-based Authentication of Named Entities）  ，DANE 的状态可以在 SSL-Tools 中检测。\n\nCNAME Flattening\nCNAME Flattening2 是一项加速 DNS 解析的技术，可参见 Introducing CNAME Flattening: RFC-Compliant CNAMEs at a Domain’s Root，它的原理是将 CNAME 翻译成 A 记录的工作交给 DNS 服务器，这将大大节省 CNAME 域名的查询时间。目前的服务商（Rage4，Cloudflare）大都只支持根域名的 CNAME Flattening，但这不意味着这项技术只能用于根域名：如果你使用 Powerdns 自建 DNS，你会发现它的 ALIAS 记录对任何主机均适用。\n\nTTL 缓存时间\nTTL（Time- To-Live）在域名解析中表示了一条域名解析记录在 DNS 服务器上缓存的时间，单位为秒。也就是说，如果你希望减轻 DNS 服务器的负担，TTL 就应尽量长，如果希望在更换解析后反应时间短，TTL 就应尽量短。\n\nReferences\n域名系统 - 维基百科，自由的百科全书\nIBM Knowledge Center - The difference between a trigger record and a glue record\nRFC 4509 - Use of SHA-256 in DNSSEC Delegation Signer (DS) Resource Records (RRs)\nRFC 2181 - Clarifications to the DNS Specification\n\n\n  \n    \n      ICANN已在2015年允许注册顶级域名，但其条件和审查及其严格：Frequently-Asked-Questions-ICANN-New-gTLDs. &#8617;&#xfe0e;\n    \n    \n      部分DNS提供商称其为ANAME或其它名称，这是因为该标准并没有普及导致的命名不规范，通常也理解为私有类型。 &#8617;&#xfe0e;","languages":null,"categories":["note"],"tags":["notes"]},{"title":"I spent a lot of time watching him","permalink":"https://gufeng.sh/note/time-watching/","link":"https://gufeng.sh/note/time-watching/","date":"2018-01-23T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<blockquote> <p>We’re both attracted to characters, and we saw that in each other. I spent a lot of time watching him and he spent a lot of time loving being watched. But if you think he’s the first red-wine-drinking, pretty-boy rocker in skinny jeans I’ve … been associated with, you’re out of your fucking mind.</p> <footer> <cite><a href=\"https://genius.com/Halsey-colors-lyrics\">Halsey -《Colors》</a></cite> </footer> </blockquote>","excerpt":"We’re both attracted to characters, and we saw that in each other. I spent a lot of time watching him and he spent a lot of time loving being watched. But if you think he’s the first red-wine-drinking, pretty-boy rocker in skinny jeans I’ve … been associated with, you’re out of your fucking mind.  Halsey -《Colors》","languages":null,"categories":["note"],"tags":["notes"]},{"title":"TLSv1.3 with nginx","permalink":"https://gufeng.sh/note/tlsv1.3-with-nginx/","link":"https://gufeng.sh/note/tlsv1.3-with-nginx/","date":"2018-01-21T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<p>I’ve already deployed TLSv1.3 on this server. Now you can verify that in the Security tab.</p>\n\n<h3 id=\"notice\">Notice</h3>\n<p>Notice that TLSv1.3 supports are not enabled by default on most browsers. Like Google Chrome, you may need to turn it on manually at <code class=\"language-plaintext highlighter-rouge\">chrome://flags/#tls13-variant</code></p>\n\n<p>Clone the openssl with tls1.3-draft-18 branch:</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git clone <span class=\"nt\">-b</span> tls1.3-draft-18 <span class=\"nt\">--single-branch</span> https://github.com/openssl/openssl.git openssl\n</code></pre></div></div>\n\n<p>Then just compile Nginx with OpenSSL library:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>wget <span class=\"nt\">-c</span> https://nginx.org/download/nginx-1.13.4.tar.gz\n<span class=\"nv\">$ </span><span class=\"nb\">tar </span>zxf nginx-1.13.4.tar.gz\n\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>nginx-1.13.4/\n\n<span class=\"nv\">$ </span>./configure <span class=\"nt\">--with-openssl</span><span class=\"o\">=</span>PATH_TO_CLONED_OPENSSL <span class=\"nt\">--with-openssl-opt</span><span class=\"o\">=</span><span class=\"s1\">'enable-tls1_3'</span> <span class=\"nt\">--with-http_v2_module</span> <span class=\"nt\">--with-http_ssl_module</span> <span class=\"nt\">--with-http_gzip_static_module</span>\n\n<span class=\"nv\">$ </span>make\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>make <span class=\"nb\">install</span>\n</code></pre></div></div>\n\n<p>Then you have to enable TLSv1.3 in the <code class=\"language-plaintext highlighter-rouge\">nginx.conf</code> , whose ciphers and protocols need to be updated:</p>\n<div class=\"language-conf highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">ssl_protocols</span>              <span class=\"n\">TLSv1</span> <span class=\"n\">TLSv1</span>.<span class=\"m\">1</span> <span class=\"n\">TLSv1</span>.<span class=\"m\">2</span> <span class=\"n\">TLSv1</span>.<span class=\"m\">3</span>;\n<span class=\"n\">ssl_ciphers</span>                <span class=\"n\">TLS13</span>-<span class=\"n\">AES</span>-<span class=\"m\">256</span>-<span class=\"n\">GCM</span>-<span class=\"n\">SHA384</span>:<span class=\"n\">TLS13</span>-<span class=\"n\">CHACHA20</span>-<span class=\"n\">POLY1305</span>-<span class=\"n\">SHA256</span>:<span class=\"n\">TLS13</span>-<span class=\"n\">AES</span>-<span class=\"m\">128</span>-<span class=\"n\">GCM</span>-<span class=\"n\">SHA256</span>:<span class=\"n\">TLS13</span>-<span class=\"n\">AES</span>-<span class=\"m\">128</span>-<span class=\"n\">CCM</span>-<span class=\"m\">8</span>-<span class=\"n\">SHA256</span>:<span class=\"n\">TLS13</span>-<span class=\"n\">AES</span>-<span class=\"m\">128</span>-<span class=\"n\">CCM</span>-<span class=\"n\">SHA256</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">CHACHA20</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">CHACHA20</span>-<span class=\"n\">draft</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">ECDSA</span>+<span class=\"n\">AES128</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">aRSA</span>+<span class=\"n\">AES128</span>:<span class=\"n\">RSA</span>+<span class=\"n\">AES128</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">ECDSA</span>+<span class=\"n\">AES256</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">aRSA</span>+<span class=\"n\">AES256</span>:<span class=\"n\">RSA</span>+<span class=\"n\">AES256</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">ECDSA</span>+<span class=\"m\">3</span><span class=\"n\">DES</span>:<span class=\"n\">EECDH</span>+<span class=\"n\">aRSA</span>+<span class=\"m\">3</span><span class=\"n\">DES</span>:<span class=\"n\">RSA</span>+<span class=\"m\">3</span><span class=\"n\">DES</span>:!<span class=\"n\">MD5</span>;\n</code></pre></div></div>\n\n<h2 id=\"references\">References</h2>\n<p><a href=\"https://imququ.com/post/enable-tls-1-3.html\">本博客开始支持 TLS 1.3 | JerryQu 的小站</a><br />\n<a href=\"https://github.com/ajhaydock/BoringNginx\">ajhaydock/BoringNginx: Script + Dockerfile to build Nginx with Google’s BoringSSL.</a></p>","excerpt":"I’ve already deployed TLSv1.3 on this server. Now you can verify that in the Security tab.\n\nNotice\nNotice that TLSv1.3 supports are not enabled by default on most browsers. Like Google Chrome, you may need to turn it on manually at chrome://flags/#tls13-variant\n\nClone the openssl with tls1.3-draft-18 branch:\n$ git clone -b tls1.3-draft-18 --single-branch https://github.com/openssl/openssl.git openssl\n\n\nThen just compile Nginx with OpenSSL library:\n\n$ wget -c https://nginx.org/download/nginx-1.13.4.tar.gz\n$ tar zxf nginx-1.13.4.tar.gz\n\n$ cd nginx-1.13.4/\n\n$ ./configure --with-openssl=PATH_TO_CLONED_OPENSSL --with-openssl-opt='enable-tls1_3' --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module\n\n$ make\n$ sudo make install\n\n\nThen you have to enable TLSv1.3 in the nginx.conf , whose ciphers and protocols need to be updated:\nssl_protocols              TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\nssl_ciphers                TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;\n\n\nReferences\n本博客开始支持 TLS 1.3 | JerryQu 的小站\najhaydock/BoringNginx: Script + Dockerfile to build Nginx with Google’s BoringSSL.","languages":null,"categories":["note"],"tags":["notes"]},{"title":"Passport","permalink":"https://gufeng.sh/work/passport/","link":"https://gufeng.sh/work/passport/","date":"2018-01-20T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 id=\"the-passport\">The Passport</h2>\n\n<p>Many people have trouble remembering their various passwords. For security reasons, experts advise us to change passwords frequently. Simple passwords are not recommended too. It is too hard to remember all of them, so… The passport was born for this.</p>\n\n<h2 id=\"whats-more\">What’s more</h2>\n<h1 id=\"visit-official-site\"><a href=\"https://ifengge.cn/passport/\">Visit official site</a></h1>","excerpt":"The Passport\n\nMany people have trouble remembering their various passwords. For security reasons, experts advise us to change passwords frequently. Simple passwords are not recommended too. It is too hard to remember all of them, so… The passport was born for this.\n\nWhat’s more\nVisit official site","languages":null,"categories":["work"],"tags":["works_personal"]},{"title":"Use SMTP Server by Proxy for PHP","permalink":"https://gufeng.sh/note/use-proxy-smtp-server-for-php-mail-function/","link":"https://gufeng.sh/note/use-proxy-smtp-server-for-php-mail-function/","date":"2018-01-05T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<blockquote>\n  <p>开发时应注意此坑，还是应该直接上 PHPMailer<br />\nIt is worth noting that the mail() function is not suitable for larger volumes of email in a loop. This function opens and closes an SMTP socket for each email, which is not very efficient.</p>\n</blockquote>\n\n<h2 id=\"原理\">原理</h2>\n<p>PHP 使用系统自带的 sendmail 二进制文件发送邮件，但是我们可以在 php.ini 中更换 sendmail 程序。\nssmtp 可以让我们使用外部的 smtp 服务器像 sendmail 一样发送邮件，我们只需将 php.ini 中的 sendmail 更换为 ssmtp 即可。</p>\n\n<h2 id=\"安装\">安装</h2>\n<p><code class=\"language-plaintext highlighter-rouge\">yum install -y ssmtp which</code></p>\n\n<h2 id=\"配置\">配置</h2>\n<p>首先用 which 找到 ssmtp 的安装位置：<code class=\"language-plaintext highlighter-rouge\">which ssmtp</code>，然后编辑配置 ssmtp 配置文件：<code class=\"language-plaintext highlighter-rouge\">vim /etc/ssmtp/ssmtpd.conf</code>\n<strong>里面的说明很详细，但是特别注意如果你的 smtp 服务器要求验证，需要手动添加两行：</strong></p>\n<div class=\"language-conf highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">AuthUser</span>=<span class=\"n\">username</span>\n<span class=\"n\">AuthPass</span>=<span class=\"n\">password</span>\n</code></pre></div></div>\n<p>搞定后还需要配置一下 php.ini：<code class=\"language-plaintext highlighter-rouge\">vim /etc/php.ini</code>，搜索 sendmail 并将 sendmail 路径替换为 ssmtp 路径即可。最后别忘了重启：</p>\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>systemctl restart php-fpm\nsystemctl restart httpd\n</code></pre></div></div>","excerpt":"开发时应注意此坑，还是应该直接上 PHPMailer\nIt is worth noting that the mail() function is not suitable for larger volumes of email in a loop. This function opens and closes an SMTP socket for each email, which is not very efficient.\n\n\n原理\nPHP 使用系统自带的 sendmail 二进制文件发送邮件，但是我们可以在 php.ini 中更换 sendmail 程序。\nssmtp 可以让我们使用外部的 smtp 服务器像 sendmail 一样发送邮件，我们只需将 php.ini 中的 sendmail 更换为 ssmtp 即可。\n\n安装\nyum install -y ssmtp which\n\n配置\n首先用 which 找到 ssmtp 的安装位置：which ssmtp，然后编辑配置 ssmtp 配置文件：vim /etc/ssmtp/ssmtpd.conf\n里面的说明很详细，但是特别注意如果你的 smtp 服务器要求验证，需要手动添加两行：\nAuthUser=username\nAuthPass=password\n\n搞定后还需要配置一下 php.ini：vim /etc/php.ini，搜索 sendmail 并将 sendmail 路径替换为 ssmtp 路径即可。最后别忘了重启：\nsystemctl restart php-fpm\nsystemctl restart httpd","languages":null,"categories":["note"],"tags":["notes"]},{"title":"Gitbook Image Viewer","permalink":"https://gufeng.sh/work/gitbook-imageviewer/","link":"https://gufeng.sh/work/gitbook-imageviewer/","date":"2017-07-23T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<blockquote>\n  <p>Electron 的图片点击默认是没有任何效果的，如果用户要查看大图就非常麻烦，同时，他默认打开链接的方式是在自己中打开，用户体验非常糟糕</p>\n</blockquote>\n\n<h2 id=\"需要-jquery\">需要 jQuery</h2>\n\n<p>在 <code>&lt;body&gt;</code> 标签的最后加入</p>\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<h2 id=\"renderer-process\">Renderer Process</h2>\n\n<p>在网页的 javascript 中，我们使用 ipc 和 Main Process 通信，官方文档中写道：</p>\n\n<blockquote>\n  <p>The <code class=\"language-plaintext highlighter-rouge\">ipcRenderer</code> module is an instance of the <a href=\"https://nodejs.org/api/events.html#events_class_eventemitter\">EventEmitter</a> class. It provides a few methods so you can send synchronous and asynchronous messages from the render process (web page) to the main process. You can also receive replies from the main process.</p>\n</blockquote>\n\n<p>所以我们在 Renderer Process 中使用 ipcRenderer 模块</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ipcRenderer</span>\n<span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">electron</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>钩住图片和链接的的 onclick</p>\n\n<p>当图片或者链接被点击时，我们阻止 Electron 的默认操作并将请求发送到 Main Process 中处理，因为和主线程息息相关，我们是用同步的方式发送请求</p>\n\n<blockquote>\n  <h4 id=\"ipcrenderersendsyncchannel-arg1-arg2-\">ipcRenderer.sendSync(channel[, arg1][, arg2][, …])</h4>\n\n  <ul>\n    <li><code class=\"language-plaintext highlighter-rouge\">channel</code> String</li>\n    <li><code class=\"language-plaintext highlighter-rouge\">...args</code> any[]</li>\n  </ul>\n\n  <p>Send a message to the main process synchronously via <code class=\"language-plaintext highlighter-rouge\">channel</code>, you can also send arbitrary arguments. Arguments will be serialized in JSON internally and hence no functions or prototype chain will be included.</p>\n\n  <p>The main process handles it by listening for <code class=\"language-plaintext highlighter-rouge\">channel</code> with <code class=\"language-plaintext highlighter-rouge\">ipcMain</code> module, and replies by setting <code class=\"language-plaintext highlighter-rouge\">event.returnValue</code>.</p>\n\n  <p><strong>Note:</strong> Sending a synchronous message will block the whole renderer process, unless you know what you are doing you should never use it.</p>\n</blockquote>\n\n<p><strong>⚠ 注：由于 macOS 中的 预览.app 打开 gif 时会卡死，所以此处选择了忽略 gif 的点击事件</strong></p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">function</span> <span class=\"nx\">rehook</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">img</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">src</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">endsWith</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">back.png</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">endsWith</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.gif</span><span class=\"dl\">\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">ipcRenderer</span><span class=\"p\">.</span><span class=\"nx\">sendSync</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">openPic</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">a</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">click</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">link</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">href</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">startsWith</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">http</span><span class=\"dl\">\"</span><span class=\"p\">)){</span>\n      <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">()</span>\n      <span class=\"nx\">ipcRenderer</span><span class=\"p\">.</span><span class=\"nx\">sendSync</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">openURL</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">link</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span><span class=\"k\">else</span> <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">link</span><span class=\"p\">.</span><span class=\"nx\">endsWith</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">.pdf</span><span class=\"dl\">\"</span><span class=\"p\">)){</span>\n      <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">()</span>\n      <span class=\"nx\">ipcRenderer</span><span class=\"p\">.</span><span class=\"nx\">sendSync</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">openPDF</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">link</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>这样，在网页加载完成后调用 <code class=\"language-plaintext highlighter-rouge\">rehook()</code> 即可钩住，比如在网页的最后使用</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script&gt;</span>\n\t<span class=\"nx\">rehook</span><span class=\"p\">()</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div></div>\n<p><strong>但是要注意的是，如果使用 pjax 刷新了页面，需要手动重新 <code class=\"language-plaintext highlighter-rouge\">rehook()</code></strong></p>\n\n<h2 id=\"main-process\">Main Process</h2>\n\n<p>主进程中，我们需要：</p>\n\n<ul>\n  <li>ipcMain 模块 - 用于接受 ipcRenderer 传输的内容</li>\n  <li>path 模块 - 用于构建路径</li>\n  <li>shell 模块 - 用于打开文件</li>\n</ul>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"p\">{</span>\n  <span class=\"nx\">app</span><span class=\"p\">,</span>\n  <span class=\"nx\">BrowserWindow</span><span class=\"p\">,</span>\n  <span class=\"nx\">ipcMain</span>\n<span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">electron</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">path</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n<span class=\"kd\">const</span> <span class=\"nx\">shell</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">electron</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">shell</span>\n</code></pre></div></div>\n<p>我们可以使用 shell.openExternal (url) 来在浏览器中打开链接</p>\n\n<blockquote>\n  <h4 id=\"shellopenexternalurl\">shell.openExternal(url)</h4>\n\n  <p>url String\noptions Object (可选) macOS\nactivate Boolean - true 让打开的应用在前面显示，默认为 true.\ncallback Function (可选) - 如果指定将执行异步打开. macOS\nerror Error</p>\n\n</blockquote>\n\n<p>在 ipcMain 接收到指定的请求后打开文件或网页</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">ipcMain</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">openPic</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">sender</span><span class=\"p\">,</span> <span class=\"nx\">filename</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">fpath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"nx\">filename</span><span class=\"p\">)</span>\n  <span class=\"nx\">shell</span><span class=\"p\">.</span><span class=\"nx\">openItem</span><span class=\"p\">(</span><span class=\"nx\">fpath</span><span class=\"p\">)</span>\n  <span class=\"nx\">sender</span><span class=\"p\">.</span><span class=\"nx\">returnValue</span> <span class=\"o\">=</span> <span class=\"nx\">fpath</span>\n<span class=\"p\">})</span>\n<span class=\"nx\">ipcMain</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">openURL</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">sender</span><span class=\"p\">,</span> <span class=\"nx\">openUrl</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">shell</span><span class=\"p\">.</span><span class=\"nx\">openExternal</span><span class=\"p\">(</span><span class=\"nx\">openUrl</span><span class=\"p\">)</span>\n  <span class=\"nx\">sender</span><span class=\"p\">.</span><span class=\"nx\">returnValue</span> <span class=\"o\">=</span> <span class=\"nx\">openUrl</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>","excerpt":"Electron 的图片点击默认是没有任何效果的，如果用户要查看大图就非常麻烦，同时，他默认打开链接的方式是在自己中打开，用户体验非常糟糕\n\n\n需要 jQuery\n\n在 &lt;body&gt; 标签的最后加入\n&lt;script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"&gt;&lt;/script&gt;\n\n\nRenderer Process\n\n在网页的 javascript 中，我们使用 ipc 和 Main Process 通信，官方文档中写道：\n\n\n  The ipcRenderer module is an instance of the EventEmitter class. It provides a few methods so you can send synchronous and asynchronous messages from the render process (web page) to the main process. You can also receive replies from the main process.\n\n\n所以我们在 Renderer Process 中使用 ipcRenderer 模块\n\nconst {\n  ipcRenderer\n} = window.require(\"electron\")\n\n钩住图片和链接的的 onclick\n\n当图片或者链接被点击时，我们阻止 Electron 的默认操作并将请求发送到 Main Process 中处理，因为和主线程息息相关，我们是用同步的方式发送请求\n\n\n  ipcRenderer.sendSync(channel[, arg1][, arg2][, …])\n\n  \n    channel String\n    ...args any[]\n  \n\n  Send a message to the main process synchronously via channel, you can also send arbitrary arguments. Arguments will be serialized in JSON internally and hence no functions or prototype chain will be included.\n\n  The main process handles it by listening for channel with ipcMain module, and replies by setting event.returnValue.\n\n  Note: Sending a synchronous message will block the whole renderer process, unless you know what you are doing you should never use it.\n\n\n⚠ 注：由于 macOS 中的 预览.app 打开 gif 时会卡死，所以此处选择了忽略 gif 的点击事件\n\nfunction rehook() {\n  $('img').on(\"click\", function(event) {\n    var file = $(event.target).attr('src')\n    if (!file.endsWith(\"back.png\") &amp;&amp; !file.endsWith(\".gif\")) {\n      ipcRenderer.sendSync('openPic', file)\n    }\n  })\n\n  $('a').on(\"click\", function(event) {\n    var link = $(event.target).attr('href')\n    if(link.startsWith(\"http\")){\n      event.preventDefault()\n      ipcRenderer.sendSync('openURL', link)\n    }else if(link.endsWith(\".pdf\")){\n      event.preventDefault()\n      ipcRenderer.sendSync('openPDF', link)\n    }\n  })\n}\n\n\n这样，在网页加载完成后调用 rehook() 即可钩住，比如在网页的最后使用\n\n&lt;script&gt;\n\trehook()\n&lt;/script&gt;\n\n但是要注意的是，如果使用 pjax 刷新了页面，需要手动重新 rehook()\n\nMain Process\n\n主进程中，我们需要：\n\n\n  ipcMain 模块 - 用于接受 ipcRenderer 传输的内容\n  path 模块 - 用于构建路径\n  shell 模块 - 用于打开文件\n\n\nconst {\n  app,\n  BrowserWindow,\n  ipcMain\n} = require('electron')\nconst path = require('path')\nconst shell = require('electron').shell\n\n我们可以使用 shell.openExternal (url) 来在浏览器中打开链接\n\n\n  shell.openExternal(url)\n\n  url String\noptions Object (可选) macOS\nactivate Boolean - true 让打开的应用在前面显示，默认为 true.\ncallback Function (可选) - 如果指定将执行异步打开. macOS\nerror Error\n\n\n\n在 ipcMain 接收到指定的请求后打开文件或网页\nipcMain.on(\"openPic\", (sender, filename) =&gt; {\n  var fpath = path.join(__dirname, filename)\n  shell.openItem(fpath)\n  sender.returnValue = fpath\n})\nipcMain.on(\"openURL\", (sender, openUrl) =&gt; {\n  shell.openExternal(openUrl)\n  sender.returnValue = openUrl\n})","languages":null,"categories":["work"],"tags":["works_community"]},{"title":"iOS Workflows","permalink":"https://gufeng.sh/work/ios-workflows/","link":"https://gufeng.sh/work/ios-workflows/","date":"2017-05-04T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<h2 id=\"删除最后截图\">删除最后截图</h2>\n<p><a href=\"https://workflow.is/workflows/0a7ca76a434446e59df80601ba953953\">添加到 Workflow</a></p>\n\n<p>一键删除最后一张截图，适合发给朋友了就跑的人（逃</p>\n\n<p><img src=\"https://img.akacdn.app/2017/05/04/IMG_0060.png\" alt=\"IMG_0060.png\" /></p>","excerpt":"删除最后截图\n添加到 Workflow\n\n一键删除最后一张截图，适合发给朋友了就跑的人（逃","languages":null,"categories":["work"],"tags":["works_tools"]},{"title":"Word Line Spacer","permalink":"https://gufeng.sh/work/word-line-spacer/","link":"https://gufeng.sh/work/word-line-spacer/","date":"2017-05-02T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<blockquote>\n  <p>仅适用于 Microsoft Word，且必须支持 VBA 脚本</p>\n</blockquote>\n\n<p>前两天语文老师想让我来给我们班做一份练字用的小册子，要求是需要方格子，并且是上面一行下面要空一行留给大家写字用。可是在用 Word 创建完格子后才发现格子是底图，并不是和文字挂钩的，这时如果调整行距会导致整篇都混乱掉，只好老老实实的保持行高，在每一行结束都换行一次了。</p>\n\n<p>由于数据量非常大，至少有 50 页，只好用 “宏” 来解决</p>\n\n<div class=\"language-vb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">Sub</span> <span class=\"err\">宏1()</span>\n    <span class=\"c1\">'选中整行，以便确定此行是否有内容</span>\n    <span class=\"nf\">Selection</span><span class=\"p\">.</span><span class=\"n\">Expand</span> <span class=\"n\">wdLine</span>\n    <span class=\"c1\">'MsgBox (Len(Selection.Text) = 1)</span>\n    <span class=\"k\">If</span> <span class=\"n\">Len</span><span class=\"p\">(</span><span class=\"n\">Selection</span><span class=\"p\">.</span><span class=\"n\">Text</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"k\">Then</span>\n        <span class=\"c1\">'此时没有内容，但是不知道为什么会返回有一个字，这里的 1 请根据测试更改</span>\n\n        <span class=\"c1\">'向下移动一行</span>\n        <span class=\"n\">Selection</span><span class=\"p\">.</span><span class=\"n\">MoveDown</span> <span class=\"n\">Unit</span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"n\">wdLine</span><span class=\"p\">,</span> <span class=\"n\">Count</span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n    <span class=\"k\">End</span> <span class=\"k\">If</span>\n    <span class=\"c1\">'将光标移动到此行的最后一个字</span>\n    <span class=\"n\">Selection</span><span class=\"p\">.</span><span class=\"n\">EndKey</span> <span class=\"n\">Unit</span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"n\">wdLine</span>\n    <span class=\"c1\">'键入两次换行</span>\n    <span class=\"n\">Selection</span><span class=\"p\">.</span><span class=\"n\">TypeParagraph</span>\n    <span class=\"n\">Selection</span><span class=\"p\">.</span><span class=\"n\">TypeParagraph</span>\n<span class=\"k\">End</span> <span class=\"k\">Sub</span>\n</code></pre></div></div>\n<p><strong>因为我使用了快捷键绑定以便在程序运行出现偏差时实时做出修正，所以在程序中没有使用循环。</strong></p>\n\n<p>当此脚本跑遍了整个文档时，基本就大功告成了，但是你会发现这时会多出很多行，其实解决起来也很简单，只需要在 “查找和替换” 中把 <code class=\"language-plaintext highlighter-rouge\">^p^p^p</code> 替换为 <code class=\"language-plaintext highlighter-rouge\">^p^p</code> 即可，这一步需要重复多次，直到没有内容被替换为止。</p>","excerpt":"仅适用于 Microsoft Word，且必须支持 VBA 脚本\n\n\n前两天语文老师想让我来给我们班做一份练字用的小册子，要求是需要方格子，并且是上面一行下面要空一行留给大家写字用。可是在用 Word 创建完格子后才发现格子是底图，并不是和文字挂钩的，这时如果调整行距会导致整篇都混乱掉，只好老老实实的保持行高，在每一行结束都换行一次了。\n\n由于数据量非常大，至少有 50 页，只好用 “宏” 来解决\n\nSub 宏1()\n    '选中整行，以便确定此行是否有内容\n    Selection.Expand wdLine\n    'MsgBox (Len(Selection.Text) = 1)\n    If Len(Selection.Text) = 1 Then\n        '此时没有内容，但是不知道为什么会返回有一个字，这里的 1 请根据测试更改\n\n        '向下移动一行\n        Selection.MoveDown Unit:=wdLine, Count:=1\n    End If\n    '将光标移动到此行的最后一个字\n    Selection.EndKey Unit:=wdLine\n    '键入两次换行\n    Selection.TypeParagraph\n    Selection.TypeParagraph\nEnd Sub\n\n因为我使用了快捷键绑定以便在程序运行出现偏差时实时做出修正，所以在程序中没有使用循环。\n\n当此脚本跑遍了整个文档时，基本就大功告成了，但是你会发现这时会多出很多行，其实解决起来也很简单，只需要在 “查找和替换” 中把 ^p^p^p 替换为 ^p^p 即可，这一步需要重复多次，直到没有内容被替换为止。","languages":null,"categories":["work"],"tags":["works_tools"]},{"title":"Verify A Real Email Address","permalink":"https://gufeng.sh/note/email-address-verify/","link":"https://gufeng.sh/note/email-address-verify/","date":"2017-02-19T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<blockquote>\n  <p>点击查看 <a href=\"https://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx/\">原文</a></p>\n</blockquote>\n\n<h2 id=\"e-mail-地址还可以是这些\">E-Mail 地址还可以是这些？？</h2>\n<ul>\n  <li>Abc\\@def@example.com</li>\n  <li>Fred\\ Bloggs@example.com</li>\n  <li>Joe.\\Blow@example.com</li>\n  <li>“Abc@def”@example.com</li>\n  <li>“Fred Bloggs”@example.com</li>\n  <li>customer/department=shipping@example.com</li>\n  <li>$A12345@example.com</li>\n  <li>!def!xyz%abc@example.com</li>\n  <li>_somename@example.com</li>\n</ul>\n\n<h2 id=\"如何写正则\">如何写正则</h2>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">EmailTests</span><span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"n\">email</span><span class=\"o\">,</span> <span class=\"n\">bool</span> <span class=\"n\">expected</span><span class=\"o\">)</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">string</span> <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"s\">\"^(?!\\.)(\"\"([^\"\"\\r\\\\]|\\\\[\"\"\\r\\\\])*\"\"|\"</span> \n    <span class=\"o\">+</span> <span class=\"err\">@</span><span class=\"s\">\"([-a-z0-9!#$%&amp;'*+/=?^_`{|}~]|(?&lt;!\\.)\\.)*)(?&lt;!\\.)\"</span> \n    <span class=\"o\">+</span> <span class=\"err\">@</span><span class=\"s\">\"@[a-z0-9][\\w\\.-]*[a-z0-9]\\.[a-z][a-z\\.]*[a-z]$\"</span><span class=\"o\">;</span>\n\n  <span class=\"nc\">Regex</span> <span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Regex</span><span class=\"o\">(</span><span class=\"n\">pattern</span><span class=\"o\">,</span> <span class=\"nc\">RegexOptions</span><span class=\"o\">.</span><span class=\"na\">IgnoreCase</span><span class=\"o\">);</span>\n  <span class=\"nc\">Assert</span><span class=\"o\">.</span><span class=\"na\">AreEqual</span><span class=\"o\">(</span><span class=\"n\">expected</span><span class=\"o\">,</span> <span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"na\">IsMatch</span><span class=\"o\">(</span><span class=\"n\">email</span><span class=\"o\">)</span>\n    <span class=\"o\">,</span> <span class=\"s\">\"Problem with '\"</span> <span class=\"o\">+</span> <span class=\"n\">email</span> <span class=\"o\">+</span> <span class=\"s\">\"'. Expected \"</span>  \n    <span class=\"o\">+</span> <span class=\"n\">expected</span> <span class=\"o\">+</span> <span class=\"s\">\" but was not that.\"</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>运行结果：</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[RowTest]\n[Row(@\"NotAnEmail\", false)]\n[Row(@\"@NotAnEmail\", false)]\n[Row(@\"\"\"test\\\\blah\"\"@example.com\", true)]\n[Row(@\"\"\"test\\blah\"\"@example.com\", false)]\n[Row(\"\\\"test\\\\\\rblah\\\"@example.com\", true)]\n[Row(\"\\\"test\\rblah\\\"@example.com\", false)]\n[Row(@\"\"\"test\\\"\"blah\"\"@example.com\", true)]\n[Row(@\"\"\"test\"\"blah\"\"@example.com\", false)]\n[Row(@\"customer/department@example.com\", true)]\n[Row(@\"$A12345@example.com\", true)]\n[Row(@\"!def!xyz%abc@example.com\", true)]\n[Row(@\"_Yosemite.Sam@example.com\", true)]\n[Row(@\"~@example.com\", true)]\n[Row(@\".wooly@example.com\", false)]\n[Row(@\"wo..oly@example.com\", false)]\n[Row(@\"pootietang.@example.com\", false)]\n[Row(@\".@example.com\", false)]\n[Row(@\"\"\"Austin@Powers\"\"@example.com\", true)]\n[Row(@\"Ima.Fool@example.com\", true)]\n[Row(@\"\"\"Ima.Fool\"\"@example.com\", true)]\n[Row(@\"\"\"Ima Fool\"\"@example.com\", true)]\n[Row(@\"Ima Fool@example.com\", false)]\n</code></pre></div></div>","excerpt":"点击查看 原文\n\n\nE-Mail 地址还可以是这些？？\n\n  Abc\\@def@example.com\n  Fred\\ Bloggs@example.com\n  Joe.\\Blow@example.com\n  “Abc@def”@example.com\n  “Fred Bloggs”@example.com\n  customer/department=shipping@example.com\n  $A12345@example.com\n  !def!xyz%abc@example.com\n  _somename@example.com\n\n\n如何写正则\n\npublic void EmailTests(string email, bool expected)\n{\n  string pattern = @\"^(?!\\.)(\"\"([^\"\"\\r\\\\]|\\\\[\"\"\\r\\\\])*\"\"|\" \n    + @\"([-a-z0-9!#$%&amp;'*+/=?^_`{|}~]|(?&lt;!\\.)\\.)*)(?&lt;!\\.)\" \n    + @\"@[a-z0-9][\\w\\.-]*[a-z0-9]\\.[a-z][a-z\\.]*[a-z]$\";\n\n  Regex regex = new Regex(pattern, RegexOptions.IgnoreCase);\n  Assert.AreEqual(expected, regex.IsMatch(email)\n    , \"Problem with '\" + email + \"'. Expected \"  \n    + expected + \" but was not that.\");\n}\n\n\n运行结果：\n[RowTest]\n[Row(@\"NotAnEmail\", false)]\n[Row(@\"@NotAnEmail\", false)]\n[Row(@\"\"\"test\\\\blah\"\"@example.com\", true)]\n[Row(@\"\"\"test\\blah\"\"@example.com\", false)]\n[Row(\"\\\"test\\\\\\rblah\\\"@example.com\", true)]\n[Row(\"\\\"test\\rblah\\\"@example.com\", false)]\n[Row(@\"\"\"test\\\"\"blah\"\"@example.com\", true)]\n[Row(@\"\"\"test\"\"blah\"\"@example.com\", false)]\n[Row(@\"customer/department@example.com\", true)]\n[Row(@\"$A12345@example.com\", true)]\n[Row(@\"!def!xyz%abc@example.com\", true)]\n[Row(@\"_Yosemite.Sam@example.com\", true)]\n[Row(@\"~@example.com\", true)]\n[Row(@\".wooly@example.com\", false)]\n[Row(@\"wo..oly@example.com\", false)]\n[Row(@\"pootietang.@example.com\", false)]\n[Row(@\".@example.com\", false)]\n[Row(@\"\"\"Austin@Powers\"\"@example.com\", true)]\n[Row(@\"Ima.Fool@example.com\", true)]\n[Row(@\"\"\"Ima.Fool\"\"@example.com\", true)]\n[Row(@\"\"\"Ima Fool\"\"@example.com\", true)]\n[Row(@\"Ima Fool@example.com\", false)]","languages":null,"categories":["note"],"tags":["notes"]},{"title":"Dalcho - Another Typecho Theme","permalink":"https://gufeng.sh/work/dalcho/","link":"https://gufeng.sh/work/dalcho/","date":"2016-10-26T00:00:00+08:00","modified":"2021-01-01T17:34:28+08:00","author":{"name":"Gufeng Shen","url":"https://gufeng.sh/","email":"t@ifengge.cn"},"content":"<blockquote>\n  <p>Dalcho 是一款简洁大气而不失功能的 Typecho 主题<br />\n停更，目前已更新至版本 v1.2\nProject suspended, with the latest version of v1.2</p>\n</blockquote>\n\n<h3 id=\"截图和预览\">截图和预览</h3>\n<p><img src=\"https://img.akacdn.app/dalcho.jpg\" alt=\"Preview\" /></p>\n\n<h2 id=\"安装\">安装</h2>\n<ol>\n  <li>下载主题</li>\n  <li>将下载的文件解压，文件夹重命名为 <code class=\"language-plaintext highlighter-rouge\">Dalcho</code>，上传到 Typecho <code class=\"language-plaintext highlighter-rouge\">usr/themes/</code> 目录下</li>\n  <li>登陆后台，在控制台下拉菜单中点击<strong>外观</strong></li>\n  <li>找到 Dalcho，点击<strong>启用</strong></li>\n  <li>根据需要更新设置外观</li>\n</ol>\n\n<h2 id=\"下载\">下载</h2>\n<p class=\"download\"><a href=\"https://github.com/tearfulDalvik/Dalcho/archive/master.zip\">Download</a> it from GitHub</p>\n<p class=\"download\">View source at <a href=\"https://github.com/tearfulDalvik/Dalcho/\">GitHub</a></p>\n\n<h2 id=\"支持和协作\">支持和协作</h2>\n\n<ul>\n  <li>如果使用有任何 Bug 欢迎提交 issue</li>\n  <li>也欢迎 Watch、Star 亦或是 Fork</li>\n</ul>\n\n<h3 id=\"license\">License</h3>\n\n<p>Copyright © 2016 <a href=\"https://ifengge.cn/\">Dalvik</a><br />\nOpen source under <a href=\"http://www.gnu.org/licenses/gpl-3.0.html\">GNU General Public License v3.0</a> license<br />\n本项目已经提交到 Github：<a href=\"https://github.com/tearfulDalvik/Dalcho/\">传送门</a></p>","excerpt":"Dalcho 是一款简洁大气而不失功能的 Typecho 主题\n停更，目前已更新至版本 v1.2\nProject suspended, with the latest version of v1.2\n\n\n截图和预览\n\n\n安装\n\n  下载主题\n  将下载的文件解压，文件夹重命名为 Dalcho，上传到 Typecho usr/themes/ 目录下\n  登陆后台，在控制台下拉菜单中点击外观\n  找到 Dalcho，点击启用\n  根据需要更新设置外观\n\n\n下载\nDownload it from GitHub\nView source at GitHub\n\n支持和协作\n\n\n  如果使用有任何 Bug 欢迎提交 issue\n  也欢迎 Watch、Star 亦或是 Fork\n\n\nLicense\n\nCopyright © 2016 Dalvik\nOpen source under GNU General Public License v3.0 license\n本项目已经提交到 Github：传送门","languages":null,"categories":["work"],"tags":["works_community"]}]